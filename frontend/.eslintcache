[{"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js":"1","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js":"2","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js":"3","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js":"4","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js":"5","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js":"6","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js":"7","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js":"8","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js":"9","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js":"10","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js":"11","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js":"12","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js":"13","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js":"14","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js":"15","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/modal_reducer.js":"16","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js":"17","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/splash/splash_page_container.js":"18","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js":"19","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/modal/modal.jsx":"20","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js":"21","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js":"22","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js":"23","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/modal_actions.js":"24","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/splash/splash_page.jsx":"25","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx":"26","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js":"27","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js":"28","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx":"29","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js":"30","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js":"31","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/data_share.js":"32","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/session_form.js":"33","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js":"34","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js":"35","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx":"36","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx":"37","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx":"38","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js":"39","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies_container.js":"40","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies.jsx":"41","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx":"42","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx":"43","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_reply_form.jsx":"44"},{"size":1901,"mtime":1611763313924,"results":"45","hashOfConfig":"46"},{"size":113,"mtime":1609168078036,"results":"47","hashOfConfig":"46"},{"size":550,"mtime":1611763313929,"results":"48","hashOfConfig":"46"},{"size":286,"mtime":1609373490691,"results":"49","hashOfConfig":"46"},{"size":1120,"mtime":1611763313929,"results":"50","hashOfConfig":"46"},{"size":2197,"mtime":1611788026287,"results":"51","hashOfConfig":"46"},{"size":507,"mtime":1609373490691,"results":"52","hashOfConfig":"46"},{"size":728,"mtime":1611763313915,"results":"53","hashOfConfig":"46"},{"size":361,"mtime":1611763313926,"results":"54","hashOfConfig":"46"},{"size":1030,"mtime":1611788026297,"results":"55","hashOfConfig":"46"},{"size":172,"mtime":1606838017480,"results":"56","hashOfConfig":"46"},{"size":737,"mtime":1611788026294,"results":"57","hashOfConfig":"46"},{"size":1779,"mtime":1611763313925,"results":"58","hashOfConfig":"46"},{"size":920,"mtime":1611788026288,"results":"59","hashOfConfig":"46"},{"size":854,"mtime":1611763313916,"results":"60","hashOfConfig":"46"},{"size":282,"mtime":1611763313925,"results":"61","hashOfConfig":"46"},{"size":258,"mtime":1609786510829,"results":"62","hashOfConfig":"46"},{"size":367,"mtime":1611788026292,"results":"63","hashOfConfig":"46"},{"size":2531,"mtime":1611763313925,"results":"64","hashOfConfig":"46"},{"size":1002,"mtime":1611788026290,"results":"65","hashOfConfig":"46"},{"size":429,"mtime":1606838017481,"results":"66","hashOfConfig":"46"},{"size":1069,"mtime":1609779048130,"results":"67","hashOfConfig":"46"},{"size":2192,"mtime":1611763313914,"results":"68","hashOfConfig":"46"},{"size":245,"mtime":1611766788968,"results":"69","hashOfConfig":"46"},{"size":594,"mtime":1611788026292,"results":"70","hashOfConfig":"46"},{"size":5888,"mtime":1611763313915,"results":"71","hashOfConfig":"46"},{"size":606,"mtime":1611788026291,"results":"72","hashOfConfig":"46"},{"size":658,"mtime":1611788026291,"results":"73","hashOfConfig":"46"},{"size":8827,"mtime":1611788026288,"results":"74","hashOfConfig":"46"},{"size":302,"mtime":1608063756134,"results":"75","hashOfConfig":"46"},{"size":333,"mtime":1608742856913,"results":"76","hashOfConfig":"46"},{"size":375,"mtime":1611763313917,"results":"77","hashOfConfig":"46"},{"size":3507,"mtime":1611788026291,"results":"78","hashOfConfig":"46"},{"size":1151,"mtime":1611763313918,"results":"79","hashOfConfig":"46"},{"size":680,"mtime":1611763313921,"results":"80","hashOfConfig":"46"},{"size":2697,"mtime":1609779048131,"results":"81","hashOfConfig":"46"},{"size":2348,"mtime":1611763313921,"results":"82","hashOfConfig":"46"},{"size":7391,"mtime":1611765774560,"results":"83","hashOfConfig":"46"},{"size":579,"mtime":1611763313920,"results":"84","hashOfConfig":"46"},{"size":562,"mtime":1609786510833,"results":"85","hashOfConfig":"46"},{"size":6760,"mtime":1611763313921,"results":"86","hashOfConfig":"46"},{"size":14350,"mtime":1611788026289,"results":"87","hashOfConfig":"46"},{"size":1916,"mtime":1611763313919,"results":"88","hashOfConfig":"46"},{"size":2362,"mtime":1609800602580,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iwtt0",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js",[],["183","184"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js",["185","186","187"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js",["188"],"import { RECEIVE_CURRENT_USER, \n         RECEIVE_USER_LOGOUT, \n         RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {}\n};\n\nexport default function(state = initialState, action) {\n  ;\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      // console.log(action.currentUser)\n      ;\n      return {\n        ...state,\n        isAuthenticated: !!action.currentUser,\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        isAuthenticated: false,\n        user: undefined\n      };\n    case RECEIVE_USER_SIGN_IN:\n      return ({\n        ...state,\n        isSignedIn: true\n      })\n    default:\n      ;\n      return state;\n  }\n}","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js",["189"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js",["190","191","192","193","194","195","196"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/modal_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/splash/splash_page_container.js",["197"],"import { connect } from 'react-redux';\nimport { openModal, closeModal} from '../../actions/modal_actions';\nimport SplashPage from './splash_page';\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  openModal: modal => dispatch(openModal(modal))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SplashPage);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/modal/modal.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js",["198","199","200","201"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/modal_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/splash/splash_page.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx",["202"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx",["203","204"],"import React from 'react';\n//import room from '../../../../validation/room';\nimport io from \"socket.io-client\";\nimport ChatBox from './chat_box_container';\nimport Sidebar from './side_bar_container'\nimport { getAvailableRooms, getRooms } from '../../util/room_api_util';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport \"./chatbox.css\"\nclass DashBoard extends React.Component{\n   constructor(props){\n      super(props);\n      this.socket = io();\n      \n      this.state = {\n         newTitle: \"\",\n         roomsAvailable: [],\n         roomsJoined: [],\n         all: [],\n         deletedRoom: null,\n         myRooms: this.props.user.rooms,\n         errors: [],\n      }\n      \n      this.createNewRoom = this.createNewRoom.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.joinRoom = this.joinRoom.bind(this);\n      this.leaveRoom = this.leaveRoom.bind(this);\n      this.userLeft = this.userLeft.bind(this);\n      this.userJoined = this.userJoined.bind(this);\n      this.deleteRoom = this.deleteRoom.bind(this);\n      this.roomDeleted = this.roomDeleted.bind(this);\n      this.ackDelete = this.ackDelete.bind(this);\n      this.roomCreated = this.roomCreated.bind(this);\n      this.addRoomCreationError = this.addRoomCreationError.bind(this);\n      \n   }\n\n   \n   //component did mount\n   componentDidMount(){\n      \n      this.props.getRooms(this.props.user.id); //this pings the database\n      \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      \n      this.socket.on(\"user left\", this.userLeft);\n      this.socket.on(\"user joined\", this.userJoined);\n      this.socket.on(\"room deleted\", this.roomDeleted);\n      this.socket.on(\"room created\", this.roomCreated);\n      this.socket.on(\"room creation error\", this.addRoomCreationError);\n   }\n\n   \n\n   componentDidUpdate(prevProps){\n      let user = this.props.user.username;\n      let rooms = this.props.rooms;\n      if (Object.keys(rooms).length != Object.keys(prevProps.rooms).length) {\n         \n         this.socket.emit(\"User connected\", { user, rooms });\n         this.props.getRooms(this.props.user.id); \n         \n         \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      };\n      // if (this.props.rooms != prevProps) {\n      //    this.render()\n      // }\n   }\n\n   userLeft({ user, room }) { \n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)) {    \n         this.props.updateUserList(room);\n      }\n   }\n\n   userJoined({ user, room }) {\n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)){\n         //reformat the user object added to the room to match existing users\n         room.users.splice(room.users.length - 1, 1);\n         room.users.push({username: user.username, _id: user.id})\n         this.props.updateUserList(room);\n      }\n   }\n   \n   createNewRoom(e){\n      e.preventDefault();\n      e.stopPropagation();\n      let room = {\n         title: this.state.newTitle,\n         admin: this.props.user.id,\n         users: this.props.user.id,\n      }\n      this.socket.emit(\"Create Room\", room);\n      this.setState({\n         newTitle: \"\",\n         errors: []\n      })\n   }\n\n   roomCreated(room){\n       \n      let roomsJoined = cloneDeep(this.state.roomsJoined);\n      let roomsAvail = cloneDeep(this.state.roomsAvailable);\n      let allRooms = cloneDeep(this.state.all);\n      \n      if (room.admin === this.props.user.id){\n         this.props.createRoom(room);\n         roomsJoined.data.push(room);\n         this.setState({\n            roomsJoined: {data: roomsJoined.data},\n         })\n      } else {\n         roomsAvail.data.push(room);\n         this.setState({\n            roomsAvailable: {data: roomsAvail.data},\n         })\n      }\n       \n      allRooms.push(room);\n      this.setState({\n         all: allRooms,\n      })\n   }\n\n   addRoomCreationError({errors, room}){\n      \n      if(room.admin === this.props.user.id){\n         this.setState({\n            errors: [errors.text],\n         })\n      }\n   }\n\n   joinRoom(e){\n       \n      let room = this.state.roomsAvailable.data.filter(room => e.currentTarget.id === room._id ? room : null);\n      \n      room[0].users.push(this.props.user.id);\n      this.props.editRoom(room[0]);\n      \n      this.socket.emit('join room', {\n         room: room[0],\n         user: this.props.user,\n      })\n   }\n\n   leaveRoom(e){\n       \n      let room = cloneDeep(this.props.rooms[e.currentTarget.id]);\n      //find and remove current user from the room users array\n      for (let i = 0; i < room.users.length; i++){\n         if(room.users[i]._id === this.props.user.id){\n            room.users.splice(i, 1);\n         }\n      }\n       \n      this.props.leaveRoom(room);\n      this.socket.emit('leave room',{\n         room: room,\n         user: this.props.user,\n      })\n   }\n\n   deleteRoom(room){\n      this.socket.emit('delete room',{room, user: this.props.user});\n   }\n\n   roomDeleted({room, user}){\n      this.props.deleteRoom(room);\n      //check if this user was a member \n       \n      let roomMembers = room.users;\n      if (this.props.user.id !== room.admin && roomMembers.includes(this.props.user.id)){\n         this.setState({deletedRoom: room});\n         \n      } else {\n         //remove from available rooms list\n         let rmsAvail = cloneDeep(this.state.roomsAvailable);\n         let index = null;\n         for (let i = 0; i < rmsAvail.data.length; i++){\n            if(rmsAvail.data[i]._id === room._id){\n               index = i;\n            }\n         }\n\n         if (index) {\n            rmsAvail.data.splice(index, 1);\n         }\n\n         this.setState({\n            roomsAvailable: {data: rmsAvail.data}\n         })\n          \n      }\n\n      //remove from joined rooms list?\n\n   }\n\n   ackDelete(){\n      this.setState({deletedRoom: null});\n   }\n\n   handleChange(e){\n      this.setState({\n         newTitle: e.currentTarget.value,\n      })\n   };\n\n\n\n\n   render(){\n      let rooms = this.props.rooms || {};\n      if (rooms.length > 0){\n         // \n      }\n      let roomIds = [];\n      //   myRooms = this.state.myRooms;\n      console.log(\"Dashboard rendered\");\n      Object.keys(rooms).forEach(key => {\n         // ;\n         roomIds.push(rooms[key]._id);  \n      });\n      // rooms.forEach(room => {\n      //    ;\n      //    roomIds.push(room.roomId);\n      // });\n      // ;\n      return(\n         <div className=\"dashboard\">\n            <Sidebar \n               createNewRoom = {this.createNewRoom}\n               newTitle={this.state.newTitle}\n               handleChange={this.handleChange}\n               joinRoom={this.joinRoom}\n               roomsAvailable={this.state.roomsAvailable}\n               allRooms = {this.state.all}\n               errors = {this.state.errors}\n            />\n            {this.state.deletedRoom ? (\n               <div className=\"deleted-room-alert\">\n                  <h3>{`\"${this.state.deletedRoom.title}\" was deleted by the admin.`}</h3>\n                  <button onClick={this.ackDelete}>OK</button>\n               </div>\n               ) : (null)            \n            }\n            <div className=\"chatbox-list\" >\n               {\n                  roomIds.map(id=>\n                     {\n                        // debugger;\n                        if (id !== undefined){\n                     return (this.props.rooms[id].closedFor.includes(this.props.user.email) ?\n                         \"\" :  <ChatBox leaveRoom={this.leaveRoom} deleteRoom={this.deleteRoom} roomId={id} key={id} socket={this.socket}/>\n                        )}\n                     }\n                  )\n               }  \n            </div>\n\n         </div>\n      )\n   }\n}\n\n\nexport default DashBoard;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/data_share.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/session_form.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx",["205","206","207"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx",["208","209","210","211","212","213","214","215"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies.jsx",["216"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx",["217","218"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { switches, switcheThread } from './data_share'\n\nconst mapStateToProps = (state) => {\n\n    return {\n        roomsJoined: state.rooms\n    };\n\n};\n\n\nclass SearchBarDropdown extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.removeEmojis = this.removeEmojis.bind(this);\n        this.listedMessages = this.listedMessages.bind(this);\n        this.findRepliesMasterMessage = this.findRepliesMasterMessage.bind(this);\n        this.objectifiedMessages = this.objectifiedMessages.bind(this);\n        this.filteredRooms = this.filteredRooms.bind(this);\n        this.objectifiedReplies = this.objectifiedReplies.bind(this);\n        this.boyer_moore = this.boyer_moore.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClickChatroom = this.handleClickChatroom.bind(this);\n        this.handleClickThread = this.handleClickThread.bind(this);\n    };\n\n\n\n    removeEmojis(string) {//function to replace emojis from https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n        const regex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n        return string.replace(regex, \" \");\n    };\n\n\n\n    listedMessages(obj) {//get an object with roomJoined's title as the key and each room's messages as values\n        const messageArr = [];\n        Object.entries(obj).forEach(room => {\n            const title = [room[1].title]; //put title ar the index 0 in the messageArr\n            const messages = room[1].messages.map(m => (\n                m.message\n            ));\n            const newArr = title.concat(messages)\n            messageArr.push(newArr);\n        });\n        return messageArr;\n    };\n\n    findRepliesMasterMessage(reply, obj) {\n        const res = [];\n        Object.entries(obj).forEach(room => {\n            room[1].messages.forEach(m => {\n                if (m.replies.map(m => (m.reply)).includes(reply)) {\n                    return res.push(m.message)\n                };\n            });\n        });\n        return res;\n    };\n\n    listedReplies(obj) {\n        const repliesArr = [];\n        Object.entries(obj).forEach(room => {\n            let allReplies = [];\n            let title = [room[1].title];\n            let replies = room[1].messages.filter(m => {\n                return m.replies.length > 0\n            });\n            for (let i = 0; i < replies.length; i++) {\n                allReplies = allReplies.concat(replies[i].replies.map(r => (r.reply)));\n            }\n            const newArr = title.concat(allReplies)\n            repliesArr.push(newArr);\n        });\n        return repliesArr;\n    };\n\n    objectifiedMessages(arr) {//get an object with roomJoined's title as the key and each room's messages as values\n        const newObj = {}\n        Object.entries(arr).forEach(room => {\n            newObj[room[1].title] = room[1].messages.map(m => (m.message));\n        });\n        return newObj;\n    };\n\n    objectifiedReplies(arr) {\n        const repObj = {};\n        arr.forEach(room => {\n            repObj[room[0]] = room.slice(1);\n        });\n        return repObj;\n    };\n\n    filteredRooms(sub) {//display a list of matching rooms\n        const { allRooms } = this.props;\n        const roomList = allRooms.map(room => {\n\n            return room.title\n        });\n        let filteredRooms = [];\n        for (let r = 0; r < roomList.length; r++) {\n            let skip;\n            let bad_char = new Array(265).fill(-1);\n\n            for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                const index = sub[t].charCodeAt();\n                bad_char[index] = t;\n            };\n\n            for (let i = 0; i <= roomList[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                skip = 0;\n                for (let j = sub.length - 1; j >= 0; j--) {\n                    if (sub[j].toLowerCase() != roomList[r][i + j].toLowerCase()) {\n                        const asciiIndex = bad_char[roomList[r][i + j].charCodeAt()];\n                        skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                        break;\n                    }\n                };\n                if (skip === 0) {\n                    filteredRooms.push([roomList[r]]);\n                    skip++;\n                    break\n                }\n            }\n        }\n        return filteredRooms; //return list of object with matching room name as key and character index as value \n    };\n\n    boyer_moore(arr, sub) {//customized seaching function based on Boyer Moore searchign algorithm for faster lookup\n        let filteredMessages = [];\n        arr.forEach(room => {//iterating thru rooms\n            for (let r = 1; r < room.length; r++) {//iterating thru messages in each room\n                if (room[r].slice(0, 8) !== 'https://' && room[r].slice(room[r].length - 4, room[r].length) !== '.gif' &&\n                    room[r].slice(0, 4) !== '<img' && room[r].slice(room[r].length - 1, room[r].length) !== '>') {//skipiing gifs\n                    room[r] = this.removeEmojis(room[r]);\n                    let skip;\n                    let bad_char = new Array(265).fill(-1);\n\n                    for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                        const index = sub[t].charCodeAt();\n                        bad_char[index] = t;\n                    };\n\n                    for (let i = 0; i <= room[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                        skip = 0;\n                        for (let j = sub.length - 1; j >= 0; j--) {\n                            if (sub[j].toLowerCase() != room[r][i + j].toLowerCase()) {\n                                const asciiIndex = bad_char[room[r][i + j].charCodeAt()];\n                                skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                                break;\n                            }\n                        };\n                        if (skip === 0) {\n                            filteredMessages.push([room[0], r - 1, i]);\n                            skip++;\n                        };\n                    }\n                }\n            }\n        });\n\n        return filteredMessages; //this returns an array: [room_title, message_index, matching_character_index]\n    };\n\n    handleOpen(id) {\n        const roomTitle = id.split('-');\n        let roomsJoined = this.props.roomsJoined\n        let email = this.props.user.email;\n        let userId = this.props.user.id;\n        for (let i = 0; i < Object.keys(roomsJoined).length; i++) {\n            if (roomsJoined[Object.keys(roomsJoined)[i]].title === roomTitle[1] && roomsJoined[Object.keys(roomsJoined)[i]].closedFor.includes(email)) {\n                let roomId = roomsJoined[Object.keys(roomsJoined)[i]]._id;\n                this.props.editClosedFor(roomId, email, userId)\n                    .then(rooms => {\n                        debugger\n                    })\n            }\n        }\n        switches.sendOpen(roomTitle[1]);//tells the chatroom to open\n    };\n    handleOpenThread(title) {\n        let roomsJoined = this.props.roomsJoined\n        let email = this.props.user.email;\n        let userId = this.props.user.id;\n        for (let i = 0; i < Object.keys(roomsJoined).length; i++) {\n            if (roomsJoined[Object.keys(roomsJoined)[i]].title === title && roomsJoined[Object.keys(roomsJoined)[i]].closedFor.includes(email)) {\n                let roomId = roomsJoined[Object.keys(roomsJoined)[i]]._id;\n                // let email = this.props.user.email;\n                // let userId = this.props.user.id;\n                this.props.editClosedFor(roomId, email, userId)\n                    .then(rooms => {\n                    })\n            }\n        }\n        switches.sendOpen(title);//tells the chatroom to open\n    };\n    async handleClickChatroom(id) {\n        await this.handleOpen(id)\n        setTimeout(() => {//open first then search the element\n            const ele = document.getElementById(id);\n            ele.scrollIntoView();\n            this.props.handleDropDown();\n        }, 600);\n    };\n    handleClickThread(id, room, msg) {\n        this.handleOpenThread(room);\n        switches.sendOpen(room);\n        setTimeout(() => {\n            switcheThread.sendOpenThread(msg);\n            setTimeout(() => {\n                const ele = document.getElementById(id);\n                ele.scrollIntoView();\n            })\n        }, 1200);\n        this.props.handleDropDown();\n    };\n\n\n\n    render() {\n        let { roomsJoined, allRooms, roomsAvailable, searchInput } = this.props;\n        if (allRooms !== undefined && roomsAvailable.data !== undefined) {\n            allRooms = allRooms.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all of the room titles [\"Dave's Room #1\", \"sss\", \"hahaha\", \"heyheyhey\", \"lala\", \"blah\", \"yoyo\", \"Cars\", \"new new new\"]\n            roomsAvailable = roomsAvailable.data.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all the rooms available to join\n        };\n\n        const roomArr = this.listedMessages(roomsJoined);\n        const repliesArr = this.listedReplies(roomsJoined);\n        const roomsDisplayed = roomArr.map(r => (r[0]));\n\n        const availableRoomObj = this.objectifiedMessages(roomsJoined);\n        const searchableReplies = this.objectifiedReplies(repliesArr);\n\n        const matchedMessages = this.boyer_moore(roomArr, searchInput).map(m => {\n            return [availableRoomObj[m[0]][m[1]].slice(m[2]), m[0], m[1]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n        const matchedRooms = this.filteredRooms(searchInput).map(room => {\n            return room[0];\n        });\n        const matchedReplies = this.boyer_moore(repliesArr, searchInput).map(m => {\n            return [searchableReplies[m[0]][m[1]].slice(m[2]), m[0], m[1], searchableReplies[m[0]][m[1]]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n\n        //function to find the thread master for the reply using the searchableReplies[m[0]][m[1]] from line 190\n        const roomsJoinable = matchedRooms.filter(room => (roomsAvailable.includes(room)));\n        const roomsOpened = matchedRooms.filter(room => (roomsDisplayed.includes(room)));\n\n\n        return (\n            <div className='searchbar-dropdown'>\n                <div className='message-results'>\n                    {matchedMessages.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedMessages.map(m => {\n                                return (\n                                    <li onClick={() => this.handleClickChatroom(`msg-${m[1]}-${m[2]}`)}>\n                                        Message: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='replies-results'>\n                    {matchedReplies.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedReplies.map(m => {\n                                const masterMessage = this.findRepliesMasterMessage(m[3], roomsJoined)//this should return a list of master messages\n                                return (\n                                    <li onClick={() => this.handleClickThread(`msg-reply-${m[3]}`, m[1], masterMessage[0])}>\n                                        Thread Replies: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='room-results'>\n                    {matchedRooms.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {roomsJoinable.length === 0 ? null :\n\n                                roomsJoinable.map(r => {\n                                    return (\n                                        <li>\n                                            {r}\n                                            <p>Rooms Not Joined</p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            {roomsOpened.length === 0 ? null :\n                                roomsOpened.map(r => {\n                                    return (\n                                        <li>{r}</li>\n                                    )\n                                })\n                            }\n                        </ul>}\n\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    null\n)(SearchBarDropdown);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_reply_form.jsx",[],{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":3,"column":18,"nodeType":"225","messageId":"226","endLine":3,"endColumn":23},{"ruleId":"223","severity":1,"message":"227","line":5,"column":8,"nodeType":"225","messageId":"226","endLine":5,"endColumn":16},{"ruleId":"223","severity":1,"message":"228","line":6,"column":8,"nodeType":"225","messageId":"226","endLine":6,"endColumn":15},{"ruleId":"229","severity":1,"message":"230","line":10,"column":1,"nodeType":"231","endLine":36,"endColumn":2},{"ruleId":"223","severity":1,"message":"232","line":1,"column":10,"nodeType":"225","messageId":"226","endLine":1,"endColumn":15},{"ruleId":"223","severity":1,"message":"233","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":19},{"ruleId":"223","severity":1,"message":"234","line":4,"column":21,"nodeType":"225","messageId":"226","endLine":4,"endColumn":31},{"ruleId":"223","severity":1,"message":"235","line":4,"column":33,"nodeType":"225","messageId":"226","endLine":4,"endColumn":43},{"ruleId":"223","severity":1,"message":"236","line":4,"column":45,"nodeType":"225","messageId":"226","endLine":4,"endColumn":55},{"ruleId":"223","severity":1,"message":"237","line":4,"column":57,"nodeType":"225","messageId":"226","endLine":4,"endColumn":65},{"ruleId":"223","severity":1,"message":"238","line":4,"column":67,"nodeType":"225","messageId":"226","endLine":4,"endColumn":76},{"ruleId":"223","severity":1,"message":"239","line":4,"column":78,"nodeType":"225","messageId":"226","endLine":4,"endColumn":92},{"ruleId":"223","severity":1,"message":"240","line":2,"column":21,"nodeType":"225","messageId":"226","endLine":2,"endColumn":31},{"ruleId":"223","severity":1,"message":"241","line":1,"column":29,"nodeType":"225","messageId":"226","endLine":1,"endColumn":43},{"ruleId":"223","severity":1,"message":"242","line":1,"column":61,"nodeType":"225","messageId":"226","endLine":1,"endColumn":75},{"ruleId":"223","severity":1,"message":"243","line":1,"column":77,"nodeType":"225","messageId":"226","endLine":1,"endColumn":89},{"ruleId":"223","severity":1,"message":"244","line":1,"column":91,"nodeType":"225","messageId":"226","endLine":1,"endColumn":104},{"ruleId":"223","severity":1,"message":"245","line":2,"column":8,"nodeType":"225","messageId":"226","endLine":2,"endColumn":10},{"ruleId":"246","severity":1,"message":"247","line":75,"column":37,"nodeType":"248","messageId":"249","endLine":75,"endColumn":39},{"ruleId":"250","severity":1,"message":"251","line":290,"column":33,"nodeType":"252","messageId":"253","endLine":290,"endColumn":35},{"ruleId":"223","severity":1,"message":"232","line":2,"column":10,"nodeType":"225","messageId":"226","endLine":2,"endColumn":15},{"ruleId":"223","severity":1,"message":"254","line":4,"column":8,"nodeType":"225","messageId":"226","endLine":4,"endColumn":15},{"ruleId":"255","severity":1,"message":"256","line":63,"column":55,"nodeType":"257","endLine":63,"endColumn":113},{"ruleId":"223","severity":1,"message":"243","line":2,"column":9,"nodeType":"225","messageId":"226","endLine":2,"endColumn":21},{"ruleId":"223","severity":1,"message":"258","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":27},{"ruleId":"223","severity":1,"message":"259","line":4,"column":29,"nodeType":"225","messageId":"226","endLine":4,"endColumn":37},{"ruleId":"223","severity":1,"message":"260","line":5,"column":9,"nodeType":"225","messageId":"226","endLine":5,"endColumn":16},{"ruleId":"223","severity":1,"message":"261","line":6,"column":10,"nodeType":"225","messageId":"226","endLine":6,"endColumn":20},{"ruleId":"223","severity":1,"message":"262","line":55,"column":13,"nodeType":"225","messageId":"226","endLine":55,"endColumn":17},{"ruleId":"246","severity":1,"message":"247","line":73,"column":30,"nodeType":"248","messageId":"249","endLine":73,"endColumn":32},{"ruleId":"250","severity":1,"message":"251","line":174,"column":44,"nodeType":"252","messageId":"253","endLine":174,"endColumn":46},{"ruleId":"255","severity":1,"message":"256","line":157,"column":54,"nodeType":"257","endLine":157,"endColumn":112},{"ruleId":"246","severity":1,"message":"247","line":116,"column":46,"nodeType":"248","messageId":"249","endLine":116,"endColumn":48},{"ruleId":"246","severity":1,"message":"247","line":150,"column":54,"nodeType":"248","messageId":"249","endLine":150,"endColumn":56},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'MainPage' is defined but never used.","'ChatBox' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'debug' is defined but never used.","'fetchRoom' is defined but never used.","'fetchRooms' is defined but never used.","'createRoom' is defined but never used.","'removeRoom' is defined but never used.","'editRoom' is defined but never used.","'leaveRoom' is defined but never used.","'updateUserList' is defined but never used.","'closeModal' is defined but never used.","'deleteRoomUtil' is defined but never used.","'createRoomUtil' is defined but never used.","'getRoomUsers' is defined but never used.","'leaveRoomUtil' is defined but never used.","'io' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Replies' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'getAvailableRooms' is defined but never used.","'getRooms' is defined but never used.","'getUser' is defined but never used.","'updateRoom' is defined but never used.","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]