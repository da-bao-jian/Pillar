[{"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js":"1","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js":"2","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js":"3","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js":"4","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js":"5","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js":"6","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js":"7","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js":"8","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js":"9","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar_container.js":"10","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js":"11","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js":"12","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js":"13","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js":"14","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js":"15","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js":"16","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js":"17","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js":"18","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar.js":"19","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js":"20","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js":"21","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js":"22","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form.js":"23","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form.js":"24","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx":"25","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js":"26","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js":"27","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js":"28","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js":"29","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx":"30","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx":"31","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js":"32","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js":"33","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx":"34","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx":"35","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx":"36","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js":"37","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies.jsx":"38","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies_container.js":"39","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx":"40"},{"size":1741,"mtime":1609168078035,"results":"41","hashOfConfig":"42"},{"size":113,"mtime":1609168078036,"results":"43","hashOfConfig":"42"},{"size":459,"mtime":1606948685378,"results":"44","hashOfConfig":"42"},{"size":2295,"mtime":1606948685375,"results":"45","hashOfConfig":"42"},{"size":286,"mtime":1609373490691,"results":"46","hashOfConfig":"42"},{"size":507,"mtime":1609373490691,"results":"47","hashOfConfig":"42"},{"size":808,"mtime":1608571883305,"results":"48","hashOfConfig":"42"},{"size":316,"mtime":1609274231064,"results":"49","hashOfConfig":"42"},{"size":1030,"mtime":1607006939591,"results":"50","hashOfConfig":"42"},{"size":333,"mtime":1607006939590,"results":"51","hashOfConfig":"42"},{"size":506,"mtime":1606948685376,"results":"52","hashOfConfig":"42"},{"size":258,"mtime":1606838017477,"results":"53","hashOfConfig":"42"},{"size":603,"mtime":1606948685377,"results":"54","hashOfConfig":"42"},{"size":717,"mtime":1606948685377,"results":"55","hashOfConfig":"42"},{"size":914,"mtime":1609168078034,"results":"56","hashOfConfig":"42"},{"size":172,"mtime":1606838017480,"results":"57","hashOfConfig":"42"},{"size":1659,"mtime":1609373387307,"results":"58","hashOfConfig":"42"},{"size":2517,"mtime":1609373490691,"results":"59","hashOfConfig":"42"},{"size":1444,"mtime":1609274231062,"results":"60","hashOfConfig":"42"},{"size":429,"mtime":1606838017481,"results":"61","hashOfConfig":"42"},{"size":1702,"mtime":1609373387305,"results":"62","hashOfConfig":"42"},{"size":1066,"mtime":1609274231057,"results":"63","hashOfConfig":"42"},{"size":2012,"mtime":1606948685376,"results":"64","hashOfConfig":"42"},{"size":2964,"mtime":1606948685376,"results":"65","hashOfConfig":"42"},{"size":7941,"mtime":1609373490688,"results":"66","hashOfConfig":"42"},{"size":302,"mtime":1608063756134,"results":"67","hashOfConfig":"42"},{"size":974,"mtime":1608595003168,"results":"68","hashOfConfig":"42"},{"size":453,"mtime":1609168078035,"results":"69","hashOfConfig":"42"},{"size":650,"mtime":1609373490686,"results":"70","hashOfConfig":"42"},{"size":3583,"mtime":1609373490690,"results":"71","hashOfConfig":"42"},{"size":4801,"mtime":1609445639776,"results":"72","hashOfConfig":"42"},{"size":333,"mtime":1608742856913,"results":"73","hashOfConfig":"42"},{"size":679,"mtime":1609433343082,"results":"74","hashOfConfig":"42"},{"size":11608,"mtime":1609373490689,"results":"75","hashOfConfig":"42"},{"size":2697,"mtime":1609274231060,"results":"76","hashOfConfig":"42"},{"size":2328,"mtime":1609445641026,"results":"77","hashOfConfig":"42"},{"size":578,"mtime":1609274231061,"results":"78","hashOfConfig":"42"},{"size":6114,"mtime":1609446447051,"results":"79","hashOfConfig":"42"},{"size":562,"mtime":1609433359856,"results":"80","hashOfConfig":"42"},{"size":1921,"mtime":1609274231060,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"tzjp3h",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js",[],["172","173"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js",["174"],"import React from 'react';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Switch, Route } from 'react-router-dom';\nimport NavBarContainer from './nav/navbar_container';\n\nimport MainPage from './main/main_page';\nimport LoginFormContainer from './session/login_form_container';\nimport SignupFormContainer from './session/signup_form_container';\n\nimport DashBoard from './chat/dashboard_container';\nconst App = () => (\n  <div>\n    <NavBarContainer />\n    <Switch>\n        <AuthRoute exact path=\"/login\" component={LoginFormContainer} />\n        <AuthRoute exact path=\"/signup\" component={SignupFormContainer} />\n        <AuthRoute exact path=\"/\" component={MainPage} />\n        <ProtectedRoute exact path=\"/chat\" component={DashBoard} /> \n    </Switch>\n  </div>\n);\n\nexport default App;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js",["175"],"import { RECEIVE_CURRENT_USER, \n         RECEIVE_USER_LOGOUT, \n         RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      // console.log(action.currentUser)\n      return {\n        ...state,\n        isAuthenticated: !!action.currentUser,\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        isAuthenticated: false,\n        user: undefined\n      };\n    case RECEIVE_USER_SIGN_IN:\n      return ({\n        ...state,\n        isSignedIn: true\n      })\n    default:\n      return state;\n  }\n}","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js",["176","177","178","179"],"import { getRoom, getRooms, deleteRoomUtil, updateRoomUtil, createRoomUtil, getRoomUsers, leaveRoomUtil } from '../util/room_api_util';\n\nexport const RECEIVE_ROOMS = \"RECEIVE_ROOMS\";\nexport const RECEIVE_ROOM = \"RECEIVE_ROOM\";\nexport const DELETE_ROOM = \"DELETE_ROOM\";\nexport const UPDATE_ROOM = \"UPDATE_ROOM\";\nexport const LEAVE_ROOM = \"LEAVE_ROOM\";\n//export const RECEIVE_NEW_MESSAGE = \"RECEIVE_NEW_MESSAGE\";\nexport const RECEIVE_ROOM_USERS = \"RECEIVE_ROOM_USERS\";\n\n\nexport const receiveRooms = rooms => ({\n  type: RECEIVE_ROOMS,\n  rooms\n});\n\nexport const deleteRoom = room => ({\n  type: DELETE_ROOM,\n  room\n});\n\nexport const updateRoom = room => ({\n  type: UPDATE_ROOM,\n  room\n})\n\nexport const exitRoom = room => ({\n  type: LEAVE_ROOM,\n  room\n})\n\nexport const receiveRoom = room => ({\n  type: RECEIVE_ROOM,\n  room\n})\n\n\nexport const fetchRoom = (roomId) => dispatch => (\n  getRoom(roomId)\n    .then(room => dispatch(receiveRoom(room)))\n    .catch(err => console.log(err))\n);\n\nexport const createRoom = room => dispatch => {\n  dispatch(receiveRoom(room))\n}\n\nexport const removeRoom = room => dispatch => (\n  dispatch(deleteRoom(room))\n  )\n\nexport const editRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n         \n      dispatch(updateRoom(room.data))\n    })\n)\nexport const updateUserList = room => dispatch => {\n    \n  dispatch(updateRoom(room));\n    \n}\n\nexport const leaveRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n       \n      dispatch(exitRoom(room.data))\n    })\n)\n\nexport const fetchRooms = (userId) => dispatch => (\n  getRooms(userId)\n    .then(rooms => {\n      dispatch(receiveRooms(rooms));\n    })\n    .catch(err => console.log(err))\n);\n\n","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form.js",["180"],"import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Redirect} from 'react-router-dom'\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errors: {},\n      is_authenticated: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderErrors = this.renderErrors.bind(this);\n  }\n\n\n  // UNSAFE_componentWillReceiveProps(nextProps) {\n  //   if (nextProps.currentUser === true) {\n  //     this.props.history.push('/pillars');\n  //   }\n  //   this.setState({errors: nextProps.errors})\n  // }\n\n  // Handle field updates (called in the render method)\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let user = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    \n    this.props.login(user)\n    if(this.props.currentUser){\n      this.props.history.push('/pillars')\n    }\n  }\n    \n\n\n  \n\n  // Render the session errors if there are any\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LoginForm);\n","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form.js",["181","182","183"],"import { authenticate } from 'passport';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Redirect} from 'react-router'\nimport { login } from '../../util/session_api_util';\n\nclass SignupForm extends React.Component {\n  constructor(props) {\n     \n    super(props);\n    this.state = {\n      email: '',\n      username: '',\n      password: '',\n      password2: '',\n      errors: {},\n      is_authenticated: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearedErrors = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    //  \n    if (nextProps.signedIn === true) {\n      this.props.history.push('/pillar');\n    }\n    //  \n    this.setState({errors: nextProps.errors})\n  }\n\n  componentDidUpdate(prevProps){\n    //  \n    if(this.props.authenticated !== prevProps.authenticated){\n      //  \n      this.setState({is_authenticated: true})\n    }\n  }\n\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n     \n    let user = {\n      email: this.state.email,\n      username: this.state.username,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n\n    // this.props.signup(user, this.props.history); \n    this.props.signup(user, this.props.history)\n      .then(user => {\n         \n        this.props.login(user)\n      })\n    // console.log(this.props)\n    // if(this.props.authenticate){\n    //   // this.props.login(user)\n    //   this.props.history.push('/pillars')\n    // }\n\n  }\n\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"signup-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"signup-form\">\n            <br/>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"text\"\n                value={this.state.username}\n                onChange={this.update('username')}\n                placeholder=\"Username\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password2}\n                onChange={this.update('password2')}\n                placeholder=\"Confirm Password\"\n              />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignupForm);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx",["184"],"import React from 'react';\n//import room from '../../../../validation/room';\nimport io from \"socket.io-client\";\nimport ChatBox from './chat_box_container';\nimport Sidebar from './side_bar_container'\nimport { getAvailableRooms, getRooms } from '../../util/room_api_util';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport \"./chatbox.css\"\nclass DashBoard extends React.Component{\n   constructor(props){\n      super(props);\n      this.socket = io();\n      this.state = {\n         newTitle: \"\",\n         roomsAvailable: [],\n         roomsJoined: [],\n         all: [],\n         deletedRoom: null,\n      }\n\n      this.createNewRoom = this.createNewRoom.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.joinRoom = this.joinRoom.bind(this);\n      this.leaveRoom = this.leaveRoom.bind(this);\n      this.userLeft = this.userLeft.bind(this);\n      this.userJoined = this.userJoined.bind(this);\n      this.deleteRoom = this.deleteRoom.bind(this);\n      this.roomDeleted = this.roomDeleted.bind(this);\n      this.ackDelete = this.ackDelete.bind(this);\n      this.roomCreated = this.roomCreated.bind(this);\n      \n   }\n\n   \n   //component did mount\n   componentDidMount(){\n      \n      this.props.getRooms(this.props.user.id); //this pings the database\n      \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      \n      this.socket.on(\"user left\", this.userLeft);\n      this.socket.on(\"user joined\", this.userJoined);\n      this.socket.on(\"room deleted\", this.roomDeleted);\n      this.socket.on(\"room created\", this.roomCreated);\n   }\n\n   \n\n   componentDidUpdate(prevProps){\n      let user = this.props.user.username;\n      let rooms = this.props.rooms;\n      if (Object.keys(rooms).length != Object.keys(prevProps.rooms).length) {\n         \n         this.socket.emit(\"User connected\", { user, rooms });\n         this.props.getRooms(this.props.user.id); \n         \n         \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      };\n   }\n\n   userLeft({ user, room }) { \n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)) {    \n         this.props.updateUserList(room);\n      }\n   }\n\n   userJoined({ user, room }) {\n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)){\n         //reformat the user object added to the room to match existing users\n         room.users.splice(room.users.length - 1, 1);\n         room.users.push({username: user.username, _id: user.id})\n         this.props.updateUserList(room);\n      }\n   }\n   \n   createNewRoom(e){\n      e.preventDefault();\n      e.stopPropagation();\n      let room = {\n         title: this.state.newTitle,\n         admin: this.props.user.id,\n         users: this.props.user.id,\n      }\n      this.socket.emit(\"Create Room\", room);\n      this.setState({\n         newTitle: \"\",\n      })\n   }\n\n   roomCreated(room){\n       \n      let roomsJoined = cloneDeep(this.state.roomsJoined);\n      let roomsAvail = cloneDeep(this.state.roomsAvailable);\n      let allRooms = cloneDeep(this.state.all);\n      \n      if (room.admin === this.props.user.id){\n         this.props.createRoom(room);\n         roomsJoined.data.push(room);\n         this.setState({\n            roomsJoined: {data: roomsJoined.data},\n         })\n      } else {\n         roomsAvail.data.push(room);\n         this.setState({\n            roomsAvailable: {data: roomsAvail.data},\n         })\n      }\n       \n      allRooms.push(room);\n      this.setState({\n         all: allRooms,\n      })\n   }\n\n   joinRoom(e){\n       \n      let room = this.state.roomsAvailable.data.filter(room => e.currentTarget.id === room._id ? room : null);\n      \n      room[0].users.push(this.props.user.id);\n      this.props.editRoom(room[0]);\n      \n      this.socket.emit('join room', {\n         room: room[0],\n         user: this.props.user,\n      })\n   }\n\n   leaveRoom(e){\n       \n      let room = cloneDeep(this.props.rooms[e.currentTarget.id]);\n      //find and remove current user from the room users array\n      for (let i = 0; i < room.users.length; i++){\n         if(room.users[i]._id === this.props.user.id){\n            room.users.splice(i, 1);\n         }\n      }\n       \n      this.props.leaveRoom(room);\n      this.socket.emit('leave room',{\n         room: room,\n         user: this.props.user,\n      })\n   }\n\n   deleteRoom(room){\n      this.socket.emit('delete room',{room, user: this.props.user});\n   }\n\n   roomDeleted({room, user}){\n      this.props.deleteRoom(room);\n      //check if this user was a member \n       \n      let roomMembers = room.users;\n      if (this.props.user.id !== room.admin && roomMembers.includes(this.props.user.id)){\n         this.setState({deletedRoom: room});\n         \n      } else {\n         //remove from available rooms list\n         let rmsAvail = cloneDeep(this.state.roomsAvailable);\n         let index = null;\n         for (let i = 0; i < rmsAvail.data.length; i++){\n            if(rmsAvail.data[i]._id === room._id){\n               index = i;\n            }\n         }\n\n         if (index) {\n            rmsAvail.data.splice(index, 1);\n         }\n\n         this.setState({\n            roomsAvailable: {data: rmsAvail.data}\n         })\n          \n      }\n\n      //remove from joined rooms list?\n\n   }\n\n   ackDelete(){\n      this.setState({deletedRoom: null});\n   }\n\n   handleChange(e){\n      this.setState({\n         newTitle: e.currentTarget.value,\n      })\n   };\n\n\n\n\n   render(){\n      let rooms = this.props.rooms || {};\n      let roomIds = [];\n      console.log(\"Dashboard rendered\");\n      Object.keys(rooms).forEach(key => {\n         roomIds.push(rooms[key]._id);  \n      });\n\n      return(\n         <div>\n               <Sidebar \n                  createNewRoom = {this.createNewRoom}\n                  newTitle={this.state.newTitle}\n                  handleChange={this.handleChange}\n                  joinRoom={this.joinRoom}\n                  roomsAvailable={this.state.roomsAvailable}\n                  allRooms = {this.state.all}\n               />\n               {this.state.deletedRoom ? (\n                  <div className=\"deleted-room-alert\">\n                     <h3>{`\"${this.state.deletedRoom.title}\" was deleted by the admin.`}</h3>\n                     <button onClick={this.ackDelete}>OK</button>\n                  </div>\n                  ) : (null)            \n               }\n            <div className=\"chatbox-list\" >\n               {\n                  roomIds.map(id=>\n                     {\n                        return (\n                           <ChatBox leaveRoom={this.leaveRoom} deleteRoom={this.deleteRoom} roomId={id} key={id} socket={this.socket}/>\n                        )\n                     }\n                  )\n               }  \n            </div>\n\n         </div>\n      )\n   }\n}\n\n\nexport default DashBoard;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx",["185"],"import React from 'react';\nimport {getRoomUsers} from '../../util/room_api_util'\nimport SearchBarDropdown from './search_dropdown'\n\nclass Sidebar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            show_rooms: false,\n            searchInput: '',\n            dropDown: false\n        };\n        this.handleSearchInput = this.handleSearchInput.bind(this);\n        this.handleDropDown = this.handleDropDown.bind(this);\n        this.displayRooms = this.displayRooms.bind(this);\n        this.hideRooms = this.hideRooms.bind(this);\n    }\n\n    handleSearchInput(e){\n        this.setState({searchInput: e.currentTarget.value, dropDown: true});\n    };\n\n    handleDropDown(){\n        this.setState({dropDown: false});\n        // instance.infoFromSearchbar(false);\n        // if(instance.infoToChatbox()===false){\n        //     instance.infoFromSearchbar(true);\n        // }\n    };\n\n    displayRooms(){\n        this.state.show_rooms === true ? \n        this.setState({show_rooms: false}) : this.setState({show_rooms: true});\n    };\n\n    hideRooms(){\n        this.setState({show_rooms:false});\n    };\n\n\n\n\n    render(){\n        let roomsAvailable = this.props.roomsAvailable.data || [];\n        //  \n        return(\n            <div className='sidebar-contaier'>\n                <div className='search-bar-container'>\n                    <input \n                        className='search-bar' \n                        type='text'\n                        onChange={this.handleSearchInput}\n                        onKeyDown={this.handleDropDown}\n                        value={this.state.searchInput}\n                        placeholder='type here to search'\n                    />\n                    {this.state.dropDown && this.state.searchInput.length !== 0 ? \n                        <SearchBarDropdown className='search-bar-dropdown-container'\n                            handleDropDown={this.handleDropDown}\n                            searchInput={this.state.searchInput} \n                            allRooms={this.props.allRooms}\n                            roomsAvailable={this.props.roomsAvailable}\n                            />\n                        : null\n                    }\n                </div>\n                <div>\n                    <form onSubmit={this.props.createNewRoom}>\n                        <input type=\"text\" value={this.props.newTitle} \n                        onChange={this.props.handleChange}\n                        placeholder=\"Enter new room title\"/>\n                    </form>\n                    <button onClick={this.props.createNewRoom}>Create a New Chat Room</button>\n                </div>\n\n                <div>\n                    <button onClick={()=>this.displayRooms()}>Display All Joinable Chatrooms</button>\n                </div>\n                <div onMouseLeave={this.hideRooms}>\n                    {this.state && this.state.show_rooms === true ? \n                    roomsAvailable.map(room => {\n                     return (\n                        <li id={room._id} key={room._id}>\n                        <p>\n                            Title: {room.title}\n                        </p>\n                        <p>\n                            Number of current users: {room.users.length}\n                        </p>\n                        <button id={room._id} onClick={this.props.joinRoom}>Join Room</button>\n                        </li>\n                     )\n                  }) : null}\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default Sidebar;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx",["186"],"import React from \"react\"\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport UserList  from './user_list.js';\nimport './chatbox.css'\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy\";\nimport Message from '../message/message_container';\n\nclass ChatBox extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatMessage: \"\",\n      open: true,\n      openOrClose: 'close',\n      emojiPicker: false,\n      // dataFromSearchbar: instance.openOrClose//maybe use directly in the toggle function below\n    }\n\n    // debugger\n\n    this.toggle = this.toggle.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n    this.openEmoji = this.openEmoji.bind(this);\n    this.selectEmoji = this.selectEmoji.bind(this);\n    this.useGiphy = this.useGiphy.bind(this);\n    this.deleteRoom = this.deleteRoom.bind(this);\n  }\n\n\n  componentDidMount(){\n    let roomId = this.props.room._id;\n\n    this.props.socket.on(`MTC_${roomId}`, msg =>{\n       //this message has been saved to the database, now need to update redux and components\n      console.log(msg);\n       \n     \n      let newMessage = {\n        id: msg._id,\n        message: msg.message,\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt,\n        room: msg.room,\n        sender: msg.sender,\n        username: msg.username,\n        replies: msg.replies\n      }\n      this.props.afterMessageSent(newMessage);      \n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n\n  }    \n\n  handleChange(e){\n    this.setState({\n      chatMessage: e.currentTarget.value,\n    })\n    debugger\n  }\n\n  selectEmoji(e, emojiObject){\n    let newMessage = this.state.chatMessage + emojiObject.emoji;\n    this.setState({\n      chatMessage: newMessage\n    })\n  }\n\n  openEmoji(){\n    this.state.emojiPicker === true ? \n      this.setState({emojiPicker: false}) :\n      this.setState({emojiPicker: true})\n  }\n\n  submitMessage(e) {\n    if (e) { e.preventDefault()}\n\n    let username = this.props.user.username;\n    let userId = this.props.user.id;\n    let room = this.props.room;\n\n    let timestamp = moment().format('LT');\n    let message = this.state.chatMessage;\n     \n    this.props.socket.emit(\"Create Message\", {\n      message,\n      timestamp,\n      username,\n      userId,\n      room\n    })\n\n    this.setState({\n      chatMessage: \"\",\n    })\n\n    const ele = document.getElementById(`charbox-item-${room.title}`);\n    ele.scrollTop = ele.scrollHeight;\n\n\n  }\n\n  toggle(){\n    this.state.open ? \n    this.setState({open: false, openOrClose: 'open'}) : \n    this.setState({open: true, openOrClose: 'close'});\n  }\n\n  useGiphy(e){\n    this.props.socket.emit(\"Create Message\", {\n      message: `${e.target.src}`,\n      timestamp: moment().format('LT'), \n      username: this.props.user.username, \n      userId: this.props.user.id,\n      room: this.props.room,\n    })\n  }\n\n  deleteRoom(){\n    let response = window.confirm(`Are you sure you want to delete the room: \"${this.props.room.title}\"`)\n    if(response){\n      this.props.deleteRoom(this.props.room);\n    }\n  }\n\n  render() {\n    \n    let messages = this.props.room.messages.map((msg, index) => (<Message socket={this.props.socket} id={`msg-${this.props.room.title}-${index}`} msg={msg}/>)) || [];\n      \n    let users = this.props.room.users || [];\n\n      \n    return (\n      <div className={this.state.open ? 'open' : 'close'}> <button onClick={this.toggle}>{this.state.openOrClose}</button>\n        {this.state.open ? (\n          <div className=\"chatbox-container\" id={`charbox-item-${this.props.room.title}`}>\n\n            <h1>{this.props.room.title}</h1>\n            <div className='input-container' >\n              <button onClick={this.props.leaveRoom} id={this.props.roomId}>Leave Room</button>\n              {\n                this.props.user.id === this.props.room.admin ? (\n                  <button onClick={this.deleteRoom}>Delete Room</button>\n                )\n                :              \n                (null)\n              }\n              <form onSubmit={this.submitMessage}>\n\n                <input type=\"text\" value={this.state.chatMessage} onChange={this.handleChange} />\n              </form>\n                {this.state.emojiPicker === false ? \n                <button onClick={this.openEmoji} > ☺ </button> : \n              <div onMouseLeave= {this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n\n              <Giphy useGiphy={this.useGiphy} roomTitle={this.props.room.title}/>\n            </div>\n            <ul>\n                {messages}\n            </ul>\n            <UserList users={users}/>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n\n}\n\n\nexport default ChatBox;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx",["187","188"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n\n    return {\n        roomsJoined: state.rooms\n    };\n};\n\n\n\nclass SearchBarDropdown extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            openOrClose: false\n        };\n\n        // instance.infoFromSearchbar(this.state.openOrClose);\n\n        this.removeEmojis = this.removeEmojis.bind(this);\n        this.listedMessages = this.listedMessages.bind(this);\n        this.objectifiedMessages = this.objectifiedMessages.bind(this);\n        this.filteredRooms = this.filteredRooms.bind(this);\n        this.objectifiedReplies = this.objectifiedReplies.bind(this);\n        this.boyer_moore = this.boyer_moore.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    };\n\n\n\n    removeEmojis(string) {//function to replace emojis from https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n        const regex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n        return string.replace(regex, \" \");\n    };\n\n\n\n    listedMessages(obj) {//get an object with roomJoined's title as the key and each room's messages as values\n        const messageArr = [];\n        Object.entries(obj).forEach(room => {\n            const title = [room[1].title]; //put title ar the index 0 in the messageArr\n            const messages = room[1].messages.map(m => (\n                m.message\n            ));\n            const newArr = title.concat(messages)\n            messageArr.push(newArr);\n        });\n        return messageArr;\n    };\n\n    listedReplies(obj) {\n        const repliesArr = [];\n        Object.entries(obj).forEach(room => {\n            let allReplies = [];\n            let title = [room[1].title];\n            let replies = room[1].messages.filter(m => {\n                return m.replies.length > 0\n            });\n            for (let i = 0; i < replies.length; i++) {\n                allReplies = allReplies.concat(replies[i].replies.map(r => (r.reply)));\n            }\n            const newArr = title.concat(allReplies)\n            repliesArr.push(newArr);\n        });\n        return repliesArr;\n    }\n\n    objectifiedMessages(arr) {//get an object with roomJoined's title as the key and each room's messages as values\n        const newObj = {}\n        Object.entries(arr).forEach(room => {\n            newObj[room[1].title] = room[1].messages.map(m => (m.message));\n        });\n        return newObj;\n    };\n\n    objectifiedReplies(arr) {\n        const repObj = {}\n        arr.forEach(room => {\n            repObj[room[0]] = room.slice(1);\n        });\n        return repObj;\n    }\n\n    filteredRooms(sub) {//display a list of matching rooms\n        const { allRooms } = this.props;\n        const roomList = allRooms.map(room => {\n\n            return room.title\n        });\n        let filteredRooms = [];\n        for (let r = 0; r < roomList.length; r++) {\n            let skip;\n            let bad_char = new Array(265).fill(-1);\n\n            for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                const index = sub[t].charCodeAt();\n                bad_char[index] = t;\n            };\n\n            for (let i = 0; i <= roomList[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                skip = 0;\n                for (let j = sub.length - 1; j >= 0; j--) {\n                    if (sub[j].toLowerCase() != roomList[r][i + j].toLowerCase()) {\n                        const asciiIndex = bad_char[roomList[r][i + j].charCodeAt()];\n                        skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                        break;\n                    }\n                };\n                if (skip === 0) {\n                    filteredRooms.push([roomList[r]]);\n                    skip++;\n                    break\n                }\n            }\n        }\n        return filteredRooms; //return list of object with matching room name as key and character index as value \n    };\n\n    boyer_moore(arr, sub) {//customized seaching function based on Boyer Moore searchign algorithm for faster lookup\n        let filteredMessages = [];\n        arr.forEach(room => {//iterating thru rooms\n            for (let r = 1; r < room.length; r++) {//iterating thru messages in each room\n                if (room[r].slice(0, 8) !== 'https://' && room[r].slice(room[r].length - 4, room[r].length) !== '.gif' &&\n                    room[r].slice(0, 4) !== '<img' && room[r].slice(room[r].length - 1, room[r].length) !== '>') {//skipiing gifs\n                    room[r] = this.removeEmojis(room[r]);\n                    let skip;\n                    let bad_char = new Array(265).fill(-1);\n\n                    for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                        const index = sub[t].charCodeAt();\n                        bad_char[index] = t;\n                    };\n\n                    for (let i = 0; i <= room[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                        skip = 0;\n                        for (let j = sub.length - 1; j >= 0; j--) {\n                            if (sub[j].toLowerCase() != room[r][i + j].toLowerCase()) {\n                                const asciiIndex = bad_char[room[r][i + j].charCodeAt()];\n                                skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                                break;\n                            }\n                        };\n                        if (skip === 0) {\n                            filteredMessages.push([room[0], r - 1, i]);\n                            skip++;\n                        }\n                    }\n                }\n            }\n        });\n\n        return filteredMessages; //this returns an array: [room_title, message_index, matching_character_index]\n    };\n\n    handleClick(id) {\n        // instance.infoFromSearchbar(true);\n        // this.setState({openOrClose: true});\n        const ele = document.getElementById(id);\n        ele.scrollIntoView();\n        this.props.handleDropDown();\n    };\n\n    render() {\n        let { roomsJoined, allRooms, roomsAvailable, searchInput } = this.props;\n        if (allRooms !== undefined && roomsAvailable.data !== undefined) {\n            allRooms = allRooms.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all of the room titles [\"Dave's Room #1\", \"sss\", \"hahaha\", \"heyheyhey\", \"lala\", \"blah\", \"yoyo\", \"Cars\", \"new new new\"]\n            roomsAvailable = roomsAvailable.data.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all the rooms available to join\n        }\n        const roomArr = this.listedMessages(roomsJoined);\n        const repliesArr = this.listedReplies(roomsJoined);\n        const roomsDisplayed = roomArr.map(r => (r[0]));\n\n        const availableRoomObj = this.objectifiedMessages(roomsJoined);\n        const searchableReplies = this.objectifiedReplies(repliesArr);\n\n        const matchedMessages = this.boyer_moore(roomArr, searchInput).map(m => {\n            return [availableRoomObj[m[0]][m[1]].slice(m[2]), m[0], m[1]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n        const matchedRooms = this.filteredRooms(searchInput).map(room => {\n            return room[0];\n        });\n        const matchedReplies = this.boyer_moore(repliesArr, searchInput).map(m => {\n            return [searchableReplies[m[0]][m[1]].slice(m[2]), m[0], m[1], searchableReplies[m[0]][m[1]]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n\n        const roomsJoinable = matchedRooms.filter(room => (roomsAvailable.includes(room)));\n        const roomsOpened = matchedRooms.filter(room => (roomsDisplayed.includes(room)));\n\n        debugger\n        return (\n            <div className='searchbar-dropdown'>\n                <div className='message-results'>\n                    {matchedMessages.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedMessages.map(m => {\n                                return (\n                                    <li onClick={() => this.handleClick(`msg-${m[1]}-${m[2]}`)}>\n                                        Message: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='replies-results'>\n                    {matchedReplies.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedReplies.map(m => {\n                                return (\n                                    <li onClick={() => this.handleClick(`msg-reply-${m[3]}`)}>\n                                        Thread Replies: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='room-results'>\n                    {matchedRooms.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {roomsJoinable.length === 0 ? null :\n\n                                roomsJoinable.map(r => {\n                                    return (\n                                        <li>\n                                            {r}\n                                            <p>Rooms Not Joined</p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            {roomsOpened.length === 0 ? null :\n                                roomsOpened.map(r => {\n                                    return (\n                                        <li>{r}</li>\n                                    )\n                                })\n                            }\n                        </ul>}\n\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    null\n)(SearchBarDropdown);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx",["189","190","191"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies.jsx",["192"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/replies_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":3,"column":18,"nodeType":"199","messageId":"200","endLine":3,"endColumn":23},{"ruleId":"201","severity":1,"message":"202","line":10,"column":1,"nodeType":"203","endLine":32,"endColumn":2},{"ruleId":"197","severity":1,"message":"204","line":1,"column":29,"nodeType":"199","messageId":"200","endLine":1,"endColumn":43},{"ruleId":"197","severity":1,"message":"205","line":1,"column":61,"nodeType":"199","messageId":"200","endLine":1,"endColumn":75},{"ruleId":"197","severity":1,"message":"206","line":1,"column":77,"nodeType":"199","messageId":"200","endLine":1,"endColumn":89},{"ruleId":"197","severity":1,"message":"207","line":1,"column":91,"nodeType":"199","messageId":"200","endLine":1,"endColumn":104},{"ruleId":"197","severity":1,"message":"208","line":3,"column":9,"nodeType":"199","messageId":"200","endLine":3,"endColumn":17},{"ruleId":"197","severity":1,"message":"209","line":1,"column":10,"nodeType":"199","messageId":"200","endLine":1,"endColumn":22},{"ruleId":"197","severity":1,"message":"208","line":4,"column":9,"nodeType":"199","messageId":"200","endLine":4,"endColumn":17},{"ruleId":"197","severity":1,"message":"210","line":5,"column":10,"nodeType":"199","messageId":"200","endLine":5,"endColumn":15},{"ruleId":"211","severity":1,"message":"212","line":69,"column":37,"nodeType":"213","messageId":"214","endLine":69,"endColumn":39},{"ruleId":"197","severity":1,"message":"206","line":2,"column":9,"nodeType":"199","messageId":"200","endLine":2,"endColumn":21},{"ruleId":"197","severity":1,"message":"215","line":2,"column":8,"nodeType":"199","messageId":"200","endLine":2,"endColumn":10},{"ruleId":"211","severity":1,"message":"212","line":106,"column":46,"nodeType":"213","messageId":"214","endLine":106,"endColumn":48},{"ruleId":"211","severity":1,"message":"212","line":140,"column":54,"nodeType":"213","messageId":"214","endLine":140,"endColumn":56},{"ruleId":"197","severity":1,"message":"216","line":2,"column":10,"nodeType":"199","messageId":"200","endLine":2,"endColumn":15},{"ruleId":"197","severity":1,"message":"217","line":4,"column":8,"nodeType":"199","messageId":"200","endLine":4,"endColumn":15},{"ruleId":"218","severity":1,"message":"219","line":62,"column":55,"nodeType":"220","endLine":62,"endColumn":113},{"ruleId":"218","severity":1,"message":"219","line":137,"column":54,"nodeType":"220","endLine":137,"endColumn":112},"no-native-reassign",["221"],"no-negated-in-lhs",["222"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'deleteRoomUtil' is defined but never used.","'createRoomUtil' is defined but never used.","'getRoomUsers' is defined but never used.","'leaveRoomUtil' is defined but never used.","'Redirect' is defined but never used.","'authenticate' is defined but never used.","'login' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'io' is defined but never used.","'debug' is defined but never used.","'Replies' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]