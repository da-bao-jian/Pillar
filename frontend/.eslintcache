[{"/home/harry/App Academy/MERN/Pillar/frontend/src/index.js":"1","/home/harry/App Academy/MERN/Pillar/frontend/src/store/store.js":"2","/home/harry/App Academy/MERN/Pillar/frontend/src/components/root.js":"3","/home/harry/App Academy/MERN/Pillar/frontend/src/util/session_api_util.js":"4","/home/harry/App Academy/MERN/Pillar/frontend/src/util/giphy_api_util.js":"5","/home/harry/App Academy/MERN/Pillar/frontend/src/util/room_api_util.js":"6","/home/harry/App Academy/MERN/Pillar/frontend/src/actions/session_actions.js":"7","/home/harry/App Academy/MERN/Pillar/frontend/src/components/app.js":"8","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/root_reducer.js":"9","/home/harry/App Academy/MERN/Pillar/frontend/src/util/route_util.js":"10","/home/harry/App Academy/MERN/Pillar/frontend/src/components/nav/navbar_container.js":"11","/home/harry/App Academy/MERN/Pillar/frontend/src/components/main/main_page.js":"12","/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/signup_form_container.js":"13","/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/login_form_container.js":"14","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/errors_reducer.js":"15","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/dashboard_container.js":"16","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/session_reducer.js":"17","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/messages_reducer.js":"18","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/rooms_reducer.js":"19","/home/harry/App Academy/MERN/Pillar/frontend/src/components/nav/navbar.js":"20","/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/session_errors_reducer.js":"21","/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/login_form.js":"22","/home/harry/App Academy/MERN/Pillar/frontend/src/actions/room_actions.js":"23","/home/harry/App Academy/MERN/Pillar/frontend/src/actions/message_actions.js":"24","/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/signup_form.js":"25","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/dashboard.jsx":"26","/home/harry/App Academy/MERN/Pillar/frontend/src/util/message_api_util.js":"27","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/chat_box_container.js":"28","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/side_bar_container.js":"29","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/chat_box.jsx":"30","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/side_bar.jsx":"31","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/user_list.js":"32","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/data_share.js":"33","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/message_container.js":"34","/home/harry/App Academy/MERN/Pillar/frontend/src/components/giphy/giphy.jsx":"35","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/search_dropdown.jsx":"36","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/message.jsx":"37","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/replies_container.js":"38","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_message_form_container.js":"39","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/replies.jsx":"40","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_message_form.jsx":"41","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_reply_form.jsx":"42"},{"size":1901,"mtime":1609987941276,"results":"43","hashOfConfig":"44"},{"size":507,"mtime":1609378349320,"results":"45","hashOfConfig":"44"},{"size":286,"mtime":1609378349288,"results":"46","hashOfConfig":"44"},{"size":550,"mtime":1609987941291,"results":"47","hashOfConfig":"44"},{"size":113,"mtime":1609012435523,"results":"48","hashOfConfig":"44"},{"size":1248,"mtime":1611593260595,"results":"49","hashOfConfig":"44"},{"size":2197,"mtime":1609987941208,"results":"50","hashOfConfig":"44"},{"size":808,"mtime":1609987810124,"results":"51","hashOfConfig":"44"},{"size":316,"mtime":1609987810145,"results":"52","hashOfConfig":"44"},{"size":1030,"mtime":1609797289075,"results":"53","hashOfConfig":"44"},{"size":333,"mtime":1608084305845,"results":"54","hashOfConfig":"44"},{"size":258,"mtime":1609797289044,"results":"55","hashOfConfig":"44"},{"size":603,"mtime":1609987810143,"results":"56","hashOfConfig":"44"},{"size":506,"mtime":1609987810138,"results":"57","hashOfConfig":"44"},{"size":172,"mtime":1608084305856,"results":"58","hashOfConfig":"44"},{"size":920,"mtime":1609987941219,"results":"59","hashOfConfig":"44"},{"size":737,"mtime":1609987941285,"results":"60","hashOfConfig":"44"},{"size":1779,"mtime":1609987941279,"results":"61","hashOfConfig":"44"},{"size":2531,"mtime":1609987941281,"results":"62","hashOfConfig":"44"},{"size":1444,"mtime":1609987810135,"results":"63","hashOfConfig":"44"},{"size":429,"mtime":1608084305863,"results":"64","hashOfConfig":"44"},{"size":2231,"mtime":1609987810137,"results":"65","hashOfConfig":"44"},{"size":2262,"mtime":1611593260512,"results":"66","hashOfConfig":"44"},{"size":1069,"mtime":1609709711662,"results":"67","hashOfConfig":"44"},{"size":2842,"mtime":1609987810141,"results":"68","hashOfConfig":"44"},{"size":8612,"mtime":1611593578068,"results":"69","hashOfConfig":"44"},{"size":302,"mtime":1608336332628,"results":"70","hashOfConfig":"44"},{"size":849,"mtime":1611593260531,"results":"71","hashOfConfig":"44"},{"size":1013,"mtime":1609987941236,"results":"72","hashOfConfig":"44"},{"size":5921,"mtime":1611593572509,"results":"73","hashOfConfig":"44"},{"size":5018,"mtime":1611593587332,"results":"74","hashOfConfig":"44"},{"size":333,"mtime":1608747853901,"results":"75","hashOfConfig":"44"},{"size":375,"mtime":1609987941228,"results":"76","hashOfConfig":"44"},{"size":680,"mtime":1609987941269,"results":"77","hashOfConfig":"44"},{"size":2697,"mtime":1609709711702,"results":"78","hashOfConfig":"44"},{"size":14038,"mtime":1611593468248,"results":"79","hashOfConfig":"44"},{"size":2348,"mtime":1609987941259,"results":"80","hashOfConfig":"44"},{"size":562,"mtime":1609836401500,"results":"81","hashOfConfig":"44"},{"size":579,"mtime":1609987941256,"results":"82","hashOfConfig":"44"},{"size":6760,"mtime":1611593274617,"results":"83","hashOfConfig":"44"},{"size":1916,"mtime":1609987941247,"results":"84","hashOfConfig":"44"},{"size":2362,"mtime":1609836401498,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vbxwgt",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"/home/harry/App Academy/MERN/Pillar/frontend/src/index.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/store/store.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/root.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/util/session_api_util.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/util/giphy_api_util.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/util/room_api_util.js",[],["176","177"],"/home/harry/App Academy/MERN/Pillar/frontend/src/actions/session_actions.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/app.js",["178"],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/root_reducer.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/util/route_util.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/nav/navbar_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/main/main_page.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/signup_form_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/login_form_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/errors_reducer.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/dashboard_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/session_reducer.js",["179"],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/messages_reducer.js",["180"],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/rooms_reducer.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/nav/navbar.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/reducers/session_errors_reducer.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/login_form.js",["181"],"/home/harry/App Academy/MERN/Pillar/frontend/src/actions/room_actions.js",["182","183","184","185"],"/home/harry/App Academy/MERN/Pillar/frontend/src/actions/message_actions.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/session/signup_form.js",["186","187","188"],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/dashboard.jsx",["189"],"/home/harry/App Academy/MERN/Pillar/frontend/src/util/message_api_util.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/chat_box_container.js",["190","191","192","193","194","195","196"],"import { connect } from 'react-redux';\nimport { fetchMessages, afterMessageSent } from '../../actions/message_actions';\nimport ChatBox from './chat_box';\nimport { editOpenFor, editClosedFor} from '../../actions/room_actions';\n\n\nconst mapStateToProps = (state, ownProps) => {\n   \n   return {\n      user: state.session.user,\n      room: state.rooms[ownProps.roomId],\n      socket: ownProps.socket,\n   };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      getMessages: (roomId) => dispatch(fetchMessages(roomId)),\n      afterMessageSent: (msg) => {dispatch(afterMessageSent(msg))},\n      editClosedFor: (roomId, email, id) => dispatch(editClosedFor(roomId, email, id)),\n      editOpenFor: (roomId, email, id) => dispatch(editOpenFor(roomId, email, id))\n   }\n}\n\nexport default connect(\n   mapStateToProps,\n   mapDispatchToProps\n)(ChatBox);","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/side_bar_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/chat_box.jsx",["197"],"import React from \"react\"\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport UserList  from './user_list.js';\nimport './chatbox.css'\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy\";\nimport Message from '../message/message_container';\nimport {switches} from './data_share'\n\nclass ChatBox extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatMessage: \"\",\n      open: true, \n      openOrClose: 'close',\n      emojiPicker: false,\n    };\n\n\n    this.toggle = this.toggle.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n    this.openEmoji = this.openEmoji.bind(this);\n    this.selectEmoji = this.selectEmoji.bind(this);\n    this.useGiphy = this.useGiphy.bind(this);\n    this.deleteRoom = this.deleteRoom.bind(this);\n  };\n\n\n  componentDidMount(){\n    let roomId = this.props.room._id;\n\n    this.props.socket.on(`MTC_${roomId}`, msg =>{\n       //this message has been saved to the database, now need to update redux and components\n      console.log(msg);\n       \n      let newMessage = {\n        id: msg._id,\n        message: msg.message,\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt,\n        room: msg.room,\n        sender: msg.sender,\n        username: msg.username,\n        replies: msg.replies\n      }\n      this.props.afterMessageSent(newMessage);      \n    });\n\n    \n    this.subscription = switches.receiveOpen().subscribe(roomTitle=>{\n      if(roomTitle === this.props.room.title){ //send an array or object with information about the room and open to true\n        this.setState({open: true});//change the open directly but has a logic to determine it is the right room\n      } \n    });\n    \n    if(this.props.room.closedFor.includes(this.props.user.email)){\n      this.setState({open: false})\n    } else {\n      this.setState({open: true})\n    };\n\n    \n    const openOrNot = localStorage.getItem(`roomOpen${this.props.room.title}`) === 'true';\n    this.setState({open: openOrNot})\n    \n  };\n\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n\n    let props = this.props;\n    let email = props.user.email;\n    let id = props.user.id;\n     \n    if(this.state.open === false){\n      props.editClosedFor(props.room._id, email, id);\n    } else {\n      props.editOpenFor(props.room._id, email, id);\n    };\n\n    // localStorage.clear();\n\n  };   \n\n  handleChange(e){\n    this.setState({\n      chatMessage: e.currentTarget.value,\n    })\n  }\n\n  selectEmoji(e, emojiObject){\n    let newMessage = this.state.chatMessage + emojiObject.emoji;\n    this.setState({\n      chatMessage: newMessage\n    })\n  }\n\n  openEmoji(){\n    this.state.emojiPicker === true ? \n      this.setState({emojiPicker: false}) :\n      this.setState({emojiPicker: true})\n  }\n\n  submitMessage(e) {\n    if (e) { e.preventDefault()}\n\n    let username = this.props.user.username;\n    let userId = this.props.user.id;\n    let room = this.props.room;\n\n    let timestamp = moment().format('LT');\n    let message = this.state.chatMessage;\n     \n    this.props.socket.emit(\"Create Message\", {\n      message,\n      timestamp,\n      username,\n      userId,\n      room\n    })\n\n    this.setState({\n      chatMessage: \"\",\n    })\n\n    const ele = document.getElementById(`chatbox-item-${room.title}`);\n    ele.scrollTop = ele.scrollHeight;\n\n\n  }\n\n  toggle(){\n\n    if(this.state.open){\n\n      this.setState({open: false, openOrClose: 'open'});\n      const {open} = this.state;\n      localStorage.setItem(`roomOpen${this.props.room.title}`, !open);\n\n    } else {\n\n      this.setState({open: true, openOrClose: 'close'});\n      const {open} = this.state;\n      localStorage.setItem(`roomOpen${this.props.room.title}`, !open);\n\n    }\n  }\n\n  useGiphy(e){\n    this.props.socket.emit(\"Create Message\", {\n      message: `${e.target.src}`,\n      timestamp: moment().format('LT'), \n      username: this.props.user.username, \n      userId: this.props.user.id,\n      room: this.props.room,\n    })\n  }\n\n  deleteRoom(){\n    let response = window.confirm(`Are you sure you want to delete the room: \"${this.props.room.title}\"`)\n    if(response){\n      this.props.deleteRoom(this.props.room);\n    }\n  }\n\n  render() {\n    \n    let messages = this.props.room.messages.map((msg, index) => (<Message socket={this.props.socket} id={`msg-${this.props.room.title}-${index}`} msg={msg}/>)) || [];\n    let users = this.props.room.users || [];\n\n    return (\n      <div className={(this.state.open) ? 'open' : 'close'}> <button onClick={this.toggle}>{this.state.open === true ? 'close' : `${this.props.room.title}`}</button>\n        {(this.state.open ) ? (\n          <div className=\"chatbox-container\" id={`chatbox-item-${this.props.room.title}`}>\n\n            <h1>{this.props.room.title}</h1>\n            <div className='input-container' >\n              <button onClick={this.props.leaveRoom} id={this.props.roomId}>Leave Room</button>\n              {\n                this.props.user.id === this.props.room.admin ? (\n                  <button onClick={this.deleteRoom}>Delete Room</button>\n                )\n                :              \n                (null)\n              }\n              <form onSubmit={this.submitMessage}>\n\n                <input type=\"text\" value={this.state.chatMessage} onChange={this.handleChange} />\n              </form>\n                {this.state.emojiPicker === false ? \n                <button onClick={this.openEmoji} > ☺ </button> : \n              <div onMouseLeave= {this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n\n              <Giphy useGiphy={this.useGiphy} roomTitle={this.props.room.title}/>\n            </div>\n            <ul>\n                {messages}\n            </ul>\n            <UserList users={users}/>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n\n}\n\n\nexport default ChatBox;","/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/side_bar.jsx",["198","199"],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/user_list.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/data_share.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/message_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/giphy/giphy.jsx",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/chat/search_dropdown.jsx",["200","201"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport {switches, switcheThread} from './data_share'\n\nconst mapStateToProps = (state) => {\n\n    return {\n        roomsJoined: state.rooms\n    };\n\n};\n\n\nclass SearchBarDropdown extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.removeEmojis = this.removeEmojis.bind(this);\n        this.listedMessages = this.listedMessages.bind(this);\n        this.findRepliesMasterMessage = this.findRepliesMasterMessage.bind(this);\n        this.objectifiedMessages = this.objectifiedMessages.bind(this);\n        this.filteredRooms = this.filteredRooms.bind(this);\n        this.gettingSenders = this.gettingSenders.bind(this);\n        this.objectifiedReplies = this.objectifiedReplies.bind(this);\n        this.boyer_moore = this.boyer_moore.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClickChatroom = this.handleClickChatroom.bind(this);\n        this.handleClickThread = this.handleClickThread.bind(this);\n        this.gettingReplySenders = this.gettingReplySenders.bind(this);\n    };\n\n\n\n    removeEmojis(string) {//function to replace emojis from https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n        const regex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n        return string.replace(regex, \" \");\n    };\n\n\n\n    listedMessages(obj) {//get an object with roomJoined's title as the key and each room's messages as values\n        const messageArr = [];\n        Object.entries(obj).forEach(room => {\n            const title = [room[1].title]; //put title ar the index 0 in the messageArr\n            const messages = room[1].messages.map(m => (\n                m.message\n            ));\n            const newArr = title.concat(messages)\n            messageArr.push(newArr);\n        });\n        return messageArr;\n    };\n\n    findRepliesMasterMessage(reply, obj){\n        const res = [];\n        Object.entries(obj).forEach(room => {\n            room[1].messages.forEach(m => {\n                if (m.replies.map(m=>(m.reply)).includes(reply)){\n                    return res.push(m.message)\n                };\n            });\n        });\n        return res;\n    };\n\n    listedReplies(obj) {\n        const repliesArr = [];\n        Object.entries(obj).forEach(room => {\n            let allReplies = [];\n            let title = [room[1].title];\n            let replies = room[1].messages.filter(m => {\n                return m.replies.length > 0\n            });\n            for (let i = 0; i < replies.length; i++) {\n                allReplies = allReplies.concat(replies[i].replies.map(r => (r.reply)));\n            }\n            const newArr = title.concat(allReplies)\n            repliesArr.push(newArr);\n        });\n        return repliesArr;\n    };\n\n    objectifiedMessages(arr) {//get an object with roomJoined's title as the key and each room's messages as values\n        const newObj = {}\n        Object.entries(arr).forEach(room => {\n            newObj[room[1].title] = room[1].messages.map(m => (m.message));\n        });\n        return newObj;\n    };\n\n    objectifiedReplies(arr) {\n        const repObj = {};\n        arr.forEach(room => {\n            repObj[room[0]] = room.slice(1);\n        });\n        return repObj;\n    };\n\n    gettingSenders(obj){\n        let res = {};\n        Object.values(obj).map(room=>(room.messages)).map(message=>{\n            for(let i=0; i<message.length; i++){\n                res[message[i].message] = message[i].username;\n            };\n        });\n        return res\n    };\n\n    gettingReplySenders(obj){\n        let res = {};\n        Object.values(obj).map(room=>(room.messages)).map(message=>{\n            for(let i=0; i<message.length; i++){\n                message[i].replies.forEach(rep => {\n                    res[rep.reply]=rep.username;\n                });\n                // res[message[i].message] = message[i].username;\n            };\n        });\n        return res\n    }\n\n    filteredRooms(sub) {//display a list of matching rooms\n        const { allRooms } = this.props;\n        const roomList = allRooms.map(room => {\n\n            return room.title\n        });\n        let filteredRooms = [];\n        for (let r = 0; r < roomList.length; r++) {\n            let skip;\n            let bad_char = new Array(265).fill(-1);\n\n            for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                const index = sub[t].charCodeAt();\n                bad_char[index] = t;\n            };\n\n            for (let i = 0; i <= roomList[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                skip = 0;\n                for (let j = sub.length - 1; j >= 0; j--) {\n                    if (sub[j].toLowerCase() != roomList[r][i + j].toLowerCase()) {\n                        const asciiIndex = bad_char[roomList[r][i + j].charCodeAt()];\n                        skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                        break;\n                    }\n                };\n                if (skip === 0) {\n                    filteredRooms.push([roomList[r]]);\n                    skip++;\n                    break\n                }\n            }\n        }\n        return filteredRooms; //return list of object with matching room name as key and character index as value \n    };\n\n    boyer_moore(arr, sub) {//customized seaching function based on Boyer Moore searchign algorithm for faster lookup\n        let filteredMessages = [];\n        arr.forEach(room => {//iterating thru rooms\n            for (let r = 1; r < room.length; r++) {//iterating thru messages in each room\n                if (room[r].slice(0, 8) !== 'https://' && room[r].slice(room[r].length - 4, room[r].length) !== '.gif' &&\n                    room[r].slice(0, 4) !== '<img' && room[r].slice(room[r].length - 1, room[r].length) !== '>') {//skipiing gifs\n                    room[r] = this.removeEmojis(room[r]);\n                    let skip;\n                    let bad_char = new Array(265).fill(-1);\n\n                    for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                        const index = sub[t].charCodeAt();\n                        bad_char[index] = t;\n                    };\n\n                    for (let i = 0; i <= room[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                        skip = 0;\n                        for (let j = sub.length - 1; j >= 0; j--) {\n                            if (sub[j].toLowerCase() != room[r][i + j].toLowerCase()) {\n                                const asciiIndex = bad_char[room[r][i + j].charCodeAt()];\n                                skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                                break;\n                            }\n                        };\n                        if (skip === 0) {\n                            filteredMessages.push([room[0], r - 1, i]);\n                            skip++;\n                        };\n                    }\n                }\n            }\n        });\n\n        return filteredMessages; //this returns an array: [room_title, message_index, matching_character_index]\n    };\n\n    handleOpen(id){\n        const roomTitle = id.split('-');\n        switches.sendOpen(roomTitle[1]);//tells the chatroom to open\n    };\n\n    handleClickChatroom(id) {\n            this.handleOpen(id);\n            setTimeout(()=>{//open first then search the element\n                const ele = document.getElementById(id);\n                ele.scrollIntoView();\n                this.props.handleDropDown();\n            }, 100);\n    };\n\n    handleClickThread(id, room, msg) {\n\n        switches.sendOpen(room);\n        setTimeout(()=>{\n            switcheThread.sendOpenThread(msg);\n            setTimeout(()=>{\n                const ele = document.getElementById(id);\n                ele.scrollIntoView();\n            })\n        }, 100);\n        this.props.handleDropDown();\n    };\n\n    render() {\n        let { roomsJoined, allRooms, roomsAvailable, searchInput } = this.props;\n        if (allRooms !== undefined && roomsAvailable.data !== undefined) {\n            allRooms = allRooms.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all of the room titles [\"Dave's Room #1\", \"sss\", \"hahaha\", \"heyheyhey\", \"lala\", \"blah\", \"yoyo\", \"Cars\", \"new new new\"]\n            roomsAvailable = roomsAvailable.data.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all the rooms available to join\n        };\n\n        const roomArr = this.listedMessages(roomsJoined);\n        const repliesArr = this.listedReplies(roomsJoined);\n        const roomsDisplayed = roomArr.map(r => (r[0]));\n        const senders = this.gettingSenders(roomsJoined);\n        const replySender = this.gettingReplySenders(roomsJoined);\n        \n        const availableRoomObj = this.objectifiedMessages(roomsJoined);\n        const searchableReplies = this.objectifiedReplies(repliesArr);\n\n        const matchedMessages = this.boyer_moore(roomArr, searchInput).map(m => {\n            return [availableRoomObj[m[0]][m[1]].slice(m[2]), m[0], m[1], availableRoomObj[m[0]][m[1]]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n        const matchedRooms = this.filteredRooms(searchInput).map(room => {\n            return room[0];\n        });\n        const matchedReplies = this.boyer_moore(repliesArr, searchInput).map(m => {\n            return [searchableReplies[m[0]][m[1]].slice(m[2]), m[0], m[1], searchableReplies[m[0]][m[1]]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n\n        //function to find the thread master for the reply using the searchableReplies[m[0]][m[1]] from line 190\n        const roomsJoinable = matchedRooms.filter(room => (roomsAvailable.includes(room)));\n        const roomsOpened = matchedRooms.filter(room => (roomsDisplayed.includes(room)));\n\n\n        debugger\n        return (\n            <div className='searchbar-dropdown'>\n                <h3>Messages</h3>\n                <div className='message-results'>\n                    {matchedMessages.length === 0 ?\n                        <p>No Messages Found</p>\n                        :\n                        <ul>\n                            {matchedMessages.map(m => {\n                                return (\n                                    <li onClick={() => this.handleClickChatroom(`msg-${m[1]}-${m[2]}`)}>\n                                        Message: {m[0]} Room: {m[1]} Sender: {senders[m[3]]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <h3>Replies</h3>\n                <div className='replies-results'>\n                    {matchedReplies.length === 0 ?\n                        <p>No Replies Found</p>\n                        :\n                        <ul>\n                            {matchedReplies.map(m => {\n                                const masterMessage = this.findRepliesMasterMessage(m[3], roomsJoined)//this should return a list of master messages\n                                return (\n                                    <li onClick={() => this.handleClickThread(`msg-reply-${m[3]}`, m[1],masterMessage[0])}>\n                                        Thread Replies: {m[0]} Room: {m[1]} Sender: {replySender[m[3]]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <h3>Chatrooms</h3>\n                <div className='room-results'>\n                    {matchedRooms.length === 0 ?\n                        <p>No Rooms Found</p>\n                        :\n                        <ul>\n                            {roomsJoinable.length === 0 ? null :\n\n                                roomsJoinable.map(r => {\n                                    return (\n                                        <li>\n                                            {r}\n                                            <p>Rooms Not Joined</p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            {roomsOpened.length === 0 ? null :\n                                roomsOpened.map(r => {\n                                    return (\n                                        <li>{r}</li>\n                                    )\n                                })\n                            }\n                        </ul>}\n\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    null\n)(SearchBarDropdown);","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/message.jsx",["202","203","204"],"import React, { Component } from 'react';\nimport { debug } from 'request';\nimport EditMessageForm from './edit_message_form_container.js';\nimport Replies from './replies.jsx';\nimport RepliesForm from './replies_container.js'\nexport default class Message extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      repliesOpen: false\n    }\n    this.editMessage = this.editMessage.bind(this);\n    this.deleteMessage = this.deleteMessage.bind(this);\n    this.deleteGif = this.deleteGif.bind(this);\n    this.toggleReplies = this.toggleReplies.bind(this)\n  };\n\n  componentDidMount(){\n    this.props.socket.on(\"Message Edited\", this.editMessage);\n    this.props.socket.on(\"Message Deleted\", this.deleteMessage);\n  };\n\n  editMessage(msg){\n     \n    if (msg._id === this.props.msg.id){\n      this.props.editMessage(msg);\n    }\n  };\n\n  deleteMessage(msg){\n    if (msg._id === this.props.msg.id) {\n      this.props.deleteMessage(msg);\n    }\n  };\n\n  deleteGif(){\n    let response = window.confirm(`Are you sure you want to delete your Gif?`);\n    if (response) {\n      this.props.socket.emit(\"Delete Message\", this.props.msg);\n    }\n  };\n\n  toggleReplies(){\n    this.state.repliesOpen === true ? \n    this.setState({repliesOpen: false}) : this.setState({repliesOpen: true})\n  };\n  \n  render() {\n    //show edit button only if current user was the author of this message\n    //open edit message textfield form if button is clicked\n    //use socket to edit database and all connected users' message\n    //update redux state (room and messages)\n    let msg = this.props.msg;\n    let author = false;\n  \n    if (msg.sender === this.props.user.id){\n       author = true;\n     }\n    \n    let message;\n    if (msg.message.includes('giphy')){\n      message = <li key={msg.id}>{msg.username} says: <img className=\"chat-img\" src={msg.message} alt=\"image\" />\n        {author && \n          <button onClick={this.deleteGif}>Delete Gif</button>\n        }\n      </li>\n    } else {\n      message = <li key={msg.id} id={this.props.id}>{msg.username} says: {msg.message}\n        {author &&\n          <EditMessageForm socket={this.props.socket} msg={msg}/> \n        }\n       \n      </li>\n    }\n\n   \n    return (\n      <div>\n      {message}\n\n        <RepliesForm socket={this.props.socket} msg={msg} message={msg.message}/>\n      </div>\n   \n    )\n  }\n}\n","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/replies_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_message_form_container.js",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/replies.jsx",["205"],"import React from \"react\"\nimport moment from \"moment\";\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy\";\nimport EditReplyForm from './edit_reply_form';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport {switcheThread} from './../../components/chat/data_share';\n\n\nclass Replies extends React.Component {\n   constructor(props){\n      super(props)\n\n      this.state ={\n         replyBox: false,\n         replyText: \"\",\n         repliesOpen: false,\n         emojiPicker: false,\n      }\n      this.handleReply = this.handleReply.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.submitReply = this.submitReply.bind(this);\n      this.toggleReplies = this.toggleReplies.bind(this)\n      this.openEmoji = this.openEmoji.bind(this);\n      this.selectEmoji = this.selectEmoji.bind(this);\n      this.useGiphy = this.useGiphy.bind(this);\n      this.deleteGifReply = this.deleteGifReply.bind(this);\n\n   };\n\n   componentDidMount(){\n      this.subscription = switcheThread.receiveOpenThread().subscribe(message=>{\n      if(message === this.props.message.message){\n        this.setState({repliesOpen: true});\n      }; \n    })\n   };\n\n   handleReply(e) {\n      \n      this.state.replyBox === false ? \n         (this.props.replies  ?\n           this.setState({ replyBox: true, repliesOpen: true })\n           : \n           this.setState({replyBox: true, repliesOpen: false})\n         ) \n        :\n        this.setState({ replyBox: false, repliesOpen: false })\n\n   }\n   handleChange(e){\n      \n      this.setState({\n         replyText: e.currentTarget.value\n      })\n   };\n\n   submitReply(e){\n      e.preventDefault();\n      let username = this.props.user.username;\n      let userId = this.props.user.id;\n       \n      let room = this.props.room;\n\n      let timestamp = moment().format('LT');\n      let reply = this.state.replyText;\n      let message = this.props.msg.message\n      let id =  this.props.message.id;\n      this.props.socket.emit(\"Edit Message\", {\n         reply,\n         timestamp,\n         username,\n         userId,\n         room,\n         message,\n         id\n      })\n      this.setState({\n         replyText: \"\",\n         repliesOpen: true,\n      })\n   };\n\n   toggleReplies() {\n      this.state.repliesOpen === true ?\n         this.setState({ repliesOpen: false, replyBox: false })\n          : \n         this.setState({ repliesOpen: true, replyBox: true })\n   };\n\n   selectEmoji(e, emojiObject) {\n      let newMessage = this.state.replyText + emojiObject.emoji;\n      this.setState({\n         replyText: newMessage\n      })\n   };\n\n   openEmoji() {\n      this.state.emojiPicker === true ?\n         this.setState({ emojiPicker: false }) :\n         this.setState({ emojiPicker: true })\n   };\n\n   useGiphy(e) {\n      e.preventDefault();\n      let username = this.props.user.username;\n      let userId = this.props.user.id;\n      let room = this.props.room;\n\n      let timestamp = moment().format('LT');\n      let reply = `${e.target.src}`;\n      let message = this.props.msg.message;\n      let id = this.props.message.id;\n      this.props.socket.emit(\"Edit Message\", {\n         reply,\n         timestamp,\n         username,\n         userId,\n         room,\n         message,\n         id\n      })\n      this.setState({\n         replyText: \"\",\n         repliesOpen: true,\n      })\n   };\n\n   deleteGifReply(e){\n      let response = window.confirm(`Are you sure you want to delete your Gif?`);\n      if (response) {\n         let replies = cloneDeep(this.props.msg.replies);\n         let replyId = e.currentTarget.id;\n          \n         let replyIndex = replies.findIndex(reply => replyId === reply._id);\n         replies.splice(replyIndex, 1);\n\n         this.props.socket.emit(\"Edit Message Reply\", {\n            message: this.props.msg,\n            replies: replies,\n         });\n      }\n   }\n\n\n   render(){\n      let msg = this.props.msg;\n\n      return(\n         <div>\n            {msg.replies && this.state.repliesOpen === true ?\n               (\n\n                  [msg.replies.map(reply => {\n                   \n                     // return (\n                     if (reply.reply.includes(\"giphy\")){\n                        return (\n                           <li key={reply._id} className=\"reply\" >\n                              {reply.username} says: <img className=\"chat-img\" src={reply.reply} alt=\"image\" />\n                              {reply.userId === this.props.user.id && \n                                 <button onClick={this.deleteGifReply} id={reply._id}>Delete Gif</button>\n                              }\n                           </li>\n                        )\n                     }\n                     else{\n                        return (\n                           <li key={reply._id} className=\"reply\" id={`msg-reply-${reply.reply}`}>\n                              {reply.username} says: {reply.reply}\n                              {reply.userId === this.props.user.id &&\n                                 <EditReplyForm socket={this.props.socket} msg={msg} replyId={reply._id}/>\n                              }\n                           </li>\n                        )\n                     }\n                  }),\n\n                     <button key=\"button\" className=\"replies-div\" onClick={this.toggleReplies}> Close Thread</button> \n                  ])\n               : (msg.replies.length > 0 ? \n                  (msg.replies.length > 1 ?\n                      <button className=\"replies-div\" onClick={this.toggleReplies}> View {msg.replies.length} replies</button>\n                      :\n                     <button className=\"replies-div\" onClick={this.toggleReplies}> View {msg.replies.length} reply</button>\n                  )\n                  : <button className=\"replies-div\" onClick={this.toggleReplies}> Start Thread</button>)\n            }\n            {this.state.replyBox === false ?\n            // (<button onClick={this.handleReply}> Add Reply</button>)\n            \"\"\n            :\n            (\n               <div>\n                  <form onSubmit={this.submitReply}>\n                    \n                     <input type=\"text\" onChange={this.handleChange} value={this.state.replyText}/>\n                        \n                  </form>\n                     {this.state.emojiPicker === false ?\n                        <button onClick={this.openEmoji} > ☺ </button> :\n                        <div onMouseLeave={this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n                     <Giphy useGiphy={this.useGiphy} roomTitle={this.props.room.title} />\n                     {/* <button onClick={this.handleReply}> Cancel</button> */}\n               </div>\n            )}\n            \n         </div>\n      )\n   }\n}\n\nexport default Replies;","/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_message_form.jsx",[],"/home/harry/App Academy/MERN/Pillar/frontend/src/components/message/edit_reply_form.jsx",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":3,"column":18,"nodeType":"212","messageId":"213","endLine":3,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":10,"column":1,"nodeType":"216","endLine":35,"endColumn":2},{"ruleId":"210","severity":1,"message":"217","line":1,"column":10,"nodeType":"212","messageId":"213","endLine":1,"endColumn":15},{"ruleId":"210","severity":1,"message":"218","line":3,"column":9,"nodeType":"212","messageId":"213","endLine":3,"endColumn":17},{"ruleId":"210","severity":1,"message":"219","line":1,"column":29,"nodeType":"212","messageId":"213","endLine":1,"endColumn":43},{"ruleId":"210","severity":1,"message":"220","line":1,"column":61,"nodeType":"212","messageId":"213","endLine":1,"endColumn":75},{"ruleId":"210","severity":1,"message":"221","line":1,"column":77,"nodeType":"212","messageId":"213","endLine":1,"endColumn":89},{"ruleId":"210","severity":1,"message":"222","line":1,"column":91,"nodeType":"212","messageId":"213","endLine":1,"endColumn":104},{"ruleId":"210","severity":1,"message":"223","line":1,"column":10,"nodeType":"212","messageId":"213","endLine":1,"endColumn":22},{"ruleId":"210","severity":1,"message":"218","line":4,"column":9,"nodeType":"212","messageId":"213","endLine":4,"endColumn":17},{"ruleId":"210","severity":1,"message":"224","line":5,"column":10,"nodeType":"212","messageId":"213","endLine":5,"endColumn":15},{"ruleId":"225","severity":1,"message":"226","line":74,"column":37,"nodeType":"227","messageId":"228","endLine":74,"endColumn":39},{"ruleId":"210","severity":1,"message":"229","line":4,"column":10,"nodeType":"212","messageId":"213","endLine":4,"endColumn":19},{"ruleId":"210","severity":1,"message":"230","line":4,"column":21,"nodeType":"212","messageId":"213","endLine":4,"endColumn":31},{"ruleId":"210","severity":1,"message":"231","line":4,"column":33,"nodeType":"212","messageId":"213","endLine":4,"endColumn":43},{"ruleId":"210","severity":1,"message":"232","line":4,"column":45,"nodeType":"212","messageId":"213","endLine":4,"endColumn":55},{"ruleId":"210","severity":1,"message":"233","line":4,"column":57,"nodeType":"212","messageId":"213","endLine":4,"endColumn":65},{"ruleId":"210","severity":1,"message":"234","line":4,"column":67,"nodeType":"212","messageId":"213","endLine":4,"endColumn":76},{"ruleId":"210","severity":1,"message":"235","line":4,"column":78,"nodeType":"212","messageId":"213","endLine":4,"endColumn":92},{"ruleId":"210","severity":1,"message":"236","line":2,"column":8,"nodeType":"212","messageId":"213","endLine":2,"endColumn":10},{"ruleId":"210","severity":1,"message":"237","line":45,"column":13,"nodeType":"212","messageId":"213","endLine":45,"endColumn":17},{"ruleId":"225","severity":1,"message":"226","line":63,"column":30,"nodeType":"227","messageId":"228","endLine":63,"endColumn":32},{"ruleId":"225","severity":1,"message":"226","line":116,"column":46,"nodeType":"227","messageId":"228","endLine":116,"endColumn":48},{"ruleId":"225","severity":1,"message":"226","line":150,"column":54,"nodeType":"227","messageId":"228","endLine":150,"endColumn":56},{"ruleId":"210","severity":1,"message":"217","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":15},{"ruleId":"210","severity":1,"message":"238","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":15},{"ruleId":"239","severity":1,"message":"240","line":63,"column":55,"nodeType":"241","endLine":63,"endColumn":113},{"ruleId":"239","severity":1,"message":"240","line":157,"column":54,"nodeType":"241","endLine":157,"endColumn":112},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'debug' is defined but never used.","'Redirect' is defined but never used.","'deleteRoomUtil' is defined but never used.","'createRoomUtil' is defined but never used.","'getRoomUsers' is defined but never used.","'leaveRoomUtil' is defined but never used.","'authenticate' is defined but never used.","'login' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'fetchRoom' is defined but never used.","'fetchRooms' is defined but never used.","'createRoom' is defined but never used.","'removeRoom' is defined but never used.","'editRoom' is defined but never used.","'leaveRoom' is defined but never used.","'updateUserList' is defined but never used.","'io' is defined but never used.","'user' is assigned a value but never used.","'Replies' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]