[{"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js":"1","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js":"2","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js":"3","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js":"4","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js":"5","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js":"6","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js":"7","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js":"8","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js":"9","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js":"10","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js":"11","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js":"12","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js":"13","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar_container.js":"14","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js":"15","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js":"16","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js":"17","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js":"18","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar.js":"19","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js":"20","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js":"21","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js":"22","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form.js":"23","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form.js":"24","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx":"25","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js":"26","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js":"27","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js":"28","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js":"29","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx":"30","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx":"31","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js":"32","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx":"33","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx":"34","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js":"35","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx":"36","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js":"37","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx":"38"},{"size":1741,"mtime":1609168078035,"results":"39","hashOfConfig":"40"},{"size":312,"mtime":1606838017478,"results":"41","hashOfConfig":"40"},{"size":351,"mtime":1606838017482,"results":"42","hashOfConfig":"40"},{"size":459,"mtime":1606948685378,"results":"43","hashOfConfig":"40"},{"size":2295,"mtime":1606948685375,"results":"44","hashOfConfig":"40"},{"size":113,"mtime":1609168078036,"results":"45","hashOfConfig":"40"},{"size":808,"mtime":1608571883305,"results":"46","hashOfConfig":"40"},{"size":316,"mtime":1609274231064,"results":"47","hashOfConfig":"40"},{"size":1030,"mtime":1607006939591,"results":"48","hashOfConfig":"40"},{"size":506,"mtime":1606948685376,"results":"49","hashOfConfig":"40"},{"size":258,"mtime":1606838017477,"results":"50","hashOfConfig":"40"},{"size":603,"mtime":1606948685377,"results":"51","hashOfConfig":"40"},{"size":914,"mtime":1609168078034,"results":"52","hashOfConfig":"40"},{"size":333,"mtime":1607006939590,"results":"53","hashOfConfig":"40"},{"size":717,"mtime":1606948685377,"results":"54","hashOfConfig":"40"},{"size":172,"mtime":1606838017480,"results":"55","hashOfConfig":"40"},{"size":1506,"mtime":1609274231063,"results":"56","hashOfConfig":"40"},{"size":2441,"mtime":1609274231063,"results":"57","hashOfConfig":"40"},{"size":1444,"mtime":1609274231062,"results":"58","hashOfConfig":"40"},{"size":1794,"mtime":1608742856910,"results":"59","hashOfConfig":"40"},{"size":429,"mtime":1606838017481,"results":"60","hashOfConfig":"40"},{"size":1066,"mtime":1609274231057,"results":"61","hashOfConfig":"40"},{"size":2964,"mtime":1606948685376,"results":"62","hashOfConfig":"40"},{"size":2012,"mtime":1606948685376,"results":"63","hashOfConfig":"40"},{"size":5671,"mtime":1609274231058,"results":"64","hashOfConfig":"40"},{"size":974,"mtime":1608595003168,"results":"65","hashOfConfig":"40"},{"size":302,"mtime":1608063756134,"results":"66","hashOfConfig":"40"},{"size":453,"mtime":1609168078035,"results":"67","hashOfConfig":"40"},{"size":626,"mtime":1608742856911,"results":"68","hashOfConfig":"40"},{"size":3414,"mtime":1609274231059,"results":"69","hashOfConfig":"40"},{"size":4146,"mtime":1609274231058,"results":"70","hashOfConfig":"40"},{"size":333,"mtime":1608742856913,"results":"71","hashOfConfig":"40"},{"size":9318,"mtime":1609274231059,"results":"72","hashOfConfig":"40"},{"size":2697,"mtime":1609274231060,"results":"73","hashOfConfig":"40"},{"size":684,"mtime":1609274231062,"results":"74","hashOfConfig":"40"},{"size":1846,"mtime":1609274231061,"results":"75","hashOfConfig":"40"},{"size":578,"mtime":1609274231061,"results":"76","hashOfConfig":"40"},{"size":1921,"mtime":1609274231060,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"tzjp3h",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/index.js",[],["165","166"],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/root.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/store/store.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/session_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/session_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/giphy_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/app.js",["167"],"import React from 'react';\nimport { AuthRoute, ProtectedRoute } from '../util/route_util';\nimport { Switch, Route } from 'react-router-dom';\nimport NavBarContainer from './nav/navbar_container';\n\nimport MainPage from './main/main_page';\nimport LoginFormContainer from './session/login_form_container';\nimport SignupFormContainer from './session/signup_form_container';\n\nimport DashBoard from './chat/dashboard_container';\nconst App = () => (\n  <div>\n    <NavBarContainer />\n    <Switch>\n        <AuthRoute exact path=\"/login\" component={LoginFormContainer} />\n        <AuthRoute exact path=\"/signup\" component={SignupFormContainer} />\n        <AuthRoute exact path=\"/\" component={MainPage} />\n        <ProtectedRoute exact path=\"/chat\" component={DashBoard} /> \n    </Switch>\n  </div>\n);\n\nexport default App;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/root_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/route_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/main/main_page.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_reducer.js",["168"],"import { RECEIVE_CURRENT_USER, \n         RECEIVE_USER_LOGOUT, \n         RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      // console.log(action.currentUser)\n      return {\n        ...state,\n        isAuthenticated: !!action.currentUser,\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        isAuthenticated: false,\n        user: undefined\n      };\n    case RECEIVE_USER_SIGN_IN:\n      return ({\n        ...state,\n        isSignedIn: true\n      })\n    default:\n      return state;\n  }\n}","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/messages_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/rooms_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/nav/navbar.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/room_actions.js",["169","170"],"import { getRoom, getRooms, deleteRoomUtil, updateRoomUtil, createRoomUtil, getRoomUsers, leaveRoomUtil } from '../util/room_api_util';\n\nexport const RECEIVE_ROOMS = \"RECEIVE_ROOMS\";\nexport const RECEIVE_ROOM = \"RECEIVE_ROOM\";\nexport const DELETE_ROOM = \"DELETE_ROOM\";\nexport const UPDATE_ROOM = \"UPDATE_ROOM\";\nexport const LEAVE_ROOM = \"LEAVE_ROOM\";\n//export const RECEIVE_NEW_MESSAGE = \"RECEIVE_NEW_MESSAGE\";\nexport const RECEIVE_ROOM_USERS = \"RECEIVE_ROOM_USERS\";\n\n\nexport const receiveRooms = rooms => ({\n  type: RECEIVE_ROOMS,\n  rooms\n});\n\nexport const deleteRoom = roomId => ({\n  type: DELETE_ROOM,\n  roomId\n});\n\nexport const updateRoom = room => ({\n  type: UPDATE_ROOM,\n  room\n})\n\nexport const exitRoom = room => ({\n  type: LEAVE_ROOM,\n  room\n})\n\nexport const receiveRoom = room => ({\n  type: RECEIVE_ROOM,\n  room\n})\n\n\nexport const fetchRoom = (roomId) => dispatch => (\n  getRoom(roomId)\n    .then(room => dispatch(receiveRoom(room)))\n    .catch(err => console.log(err))\n);\n\nexport const createRoom = room => dispatch => (\n  createRoomUtil(room)\n    .then(room => dispatch(receiveRoom(room)))\n)\n\nexport const removeRoom = roomId => dispatch => (\n  deleteRoomUtil(roomId)\n    .then(roomId => dispatch(deleteRoom(roomId)))\n  )\n\nexport const editRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n         \n      dispatch(updateRoom(room.data))\n    })\n)\nexport const updateUserList = room => dispatch => {\n    \n  dispatch(updateRoom(room));\n    \n}\n\nexport const leaveRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n       \n      dispatch(exitRoom(room.data))\n    })\n)\n\nexport const fetchRooms = (userId) => dispatch => (\n  getRooms(userId)\n    .then(rooms => {\n      dispatch(receiveRooms(rooms));\n    })\n    .catch(err => console.log(err))\n);\n\n","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/reducers/session_errors_reducer.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/actions/message_actions.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/signup_form.js",["171","172","173"],"import { authenticate } from 'passport';\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Redirect} from 'react-router'\nimport { login } from '../../util/session_api_util';\n\nclass SignupForm extends React.Component {\n  constructor(props) {\n     \n    super(props);\n    this.state = {\n      email: '',\n      username: '',\n      password: '',\n      password2: '',\n      errors: {},\n      is_authenticated: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearedErrors = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    //  \n    if (nextProps.signedIn === true) {\n      this.props.history.push('/pillar');\n    }\n    //  \n    this.setState({errors: nextProps.errors})\n  }\n\n  componentDidUpdate(prevProps){\n    //  \n    if(this.props.authenticated !== prevProps.authenticated){\n      //  \n      this.setState({is_authenticated: true})\n    }\n  }\n\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n     \n    let user = {\n      email: this.state.email,\n      username: this.state.username,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n\n    // this.props.signup(user, this.props.history); \n    this.props.signup(user, this.props.history)\n      .then(user => {\n         \n        this.props.login(user)\n      })\n    // console.log(this.props)\n    // if(this.props.authenticate){\n    //   // this.props.login(user)\n    //   this.props.history.push('/pillars')\n    // }\n\n  }\n\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"signup-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"signup-form\">\n            <br/>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"text\"\n                value={this.state.username}\n                onChange={this.update('username')}\n                placeholder=\"Username\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password2}\n                onChange={this.update('password2')}\n                placeholder=\"Confirm Password\"\n              />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignupForm);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/session/login_form.js",["174"],"import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {Redirect} from 'react-router-dom'\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      errors: {},\n      is_authenticated: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderErrors = this.renderErrors.bind(this);\n  }\n\n\n  // UNSAFE_componentWillReceiveProps(nextProps) {\n  //   if (nextProps.currentUser === true) {\n  //     this.props.history.push('/pillars');\n  //   }\n  //   this.setState({errors: nextProps.errors})\n  // }\n\n  // Handle field updates (called in the render method)\n  update(field) {\n    return e => this.setState({\n      [field]: e.currentTarget.value\n    });\n  }\n\n\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let user = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    \n    this.props.login(user)\n    if(this.props.currentUser){\n      this.props.history.push('/pillars')\n    }\n  }\n    \n\n\n  \n\n  // Render the session errors if there are any\n  renderErrors() {\n    return(\n      <ul>\n        {Object.keys(this.state.errors).map((error, i) => (\n          <li key={`error-${i}`}>\n            {this.state.errors[error]}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n              <input type=\"text\"\n                value={this.state.email}\n                onChange={this.update('email')}\n                placeholder=\"Email\"\n              />\n            <br/>\n              <input type=\"password\"\n                value={this.state.password}\n                onChange={this.update('password')}\n                placeholder=\"Password\"\n              />\n            <br/>\n            <input type=\"submit\" value=\"Submit\" />\n            {this.renderErrors()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(LoginForm);\n","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/dashboard.jsx",["175"],"import React from 'react';\n//import room from '../../../../validation/room';\nimport io from \"socket.io-client\";\nimport ChatBox from './chat_box_container';\nimport Sidebar from './side_bar_container'\nimport { getAvailableRooms, getRooms } from '../../util/room_api_util';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport \"./chatbox.css\"\nclass DashBoard extends React.Component{\n   constructor(props){\n      super(props);\n      this.socket = io();\n      this.state = {\n         newTitle: \"\",\n         roomsAvailable: [],\n         roomsJoined: [],\n         all: []\n      }\n\n      this.createNewRoom = this.createNewRoom.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.joinRoom = this.joinRoom.bind(this);\n      this.leaveRoom = this.leaveRoom.bind(this);\n      this.userLeft = this.userLeft.bind(this);\n      this.userJoined = this.userJoined.bind(this);\n      // this.userLeft = this.userLeft.bind(this);\n\n   }\n\n   \n   //component did mount\n   componentDidMount(){\n      \n      this.props.getRooms(this.props.user.id); //this pings the database\n      \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      // getAvailableRooms(this.props.user.id) //this pings the database\n      // .then(rooms => {\n         \n      //    this.setState({\n      //       roomsAvailable: rooms,\n      //    })\n      // });\n      \n      this.socket.on(\"user left\", this.userLeft);\n      this.socket.on(\"user joined\", this.userJoined);\n   }\n   \n   componentDidUpdate(prevProps){\n      let user = this.props.user.username;\n      let rooms = this.props.rooms;\n      if (Object.keys(rooms).length != Object.keys(prevProps.rooms).length) {\n         \n         this.socket.emit(\"User connected\", { user, rooms });\n         this.props.getRooms(this.props.user.id); \n         \n         \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n            //console.log(roomsAvailable);\n            \n         \n      };\n   }\n\n   userLeft({ user, room }) {\n      //update list of current users....\n       \n      this.props.updateUserList(room);\n   }\n\n   userJoined({ user, room }) {\n      //update list of current users....change format of newly added user to match state format\n      //remove old format\n      room.users.splice(room.users.length - 1, 1);\n      //add new format\n      room.users.push({username: user.username, _id: user.id})\n      this.props.updateUserList(room);\n   }\n   \n   createNewRoom(e){\n      e.preventDefault();\n      e.stopPropagation();\n      let room = {\n         title: this.state.newTitle,\n         admin: this.props.user.id,\n         users: this.props.user.id,\n      }\n      this.props.createRoom(room);\n      this.setState({\n         newTitle: \"\",\n      })\n      \n   }\n\n   joinRoom(e){\n      \n      let room = this.state.roomsAvailable.data.filter(room => e.currentTarget.id === room._id ? room : null);\n      \n      debugger\n      room[0].users.push(this.props.user.id);\n      this.props.editRoom(room[0]);\n      \n      this.socket.emit('join room', {\n         room: room[0],\n         user: this.props.user,\n      })\n       \n      \n   }\n\n   leaveRoom(e){\n       \n      let room = cloneDeep(this.props.rooms[e.currentTarget.id]);\n      //find and remove current user from the room users array\n      for (let i = 0; i < room.users.length; i++){\n         if(room.users[i]._id === this.props.user.id){\n            room.users.splice(i, 1);\n         }\n      }\n       \n      this.props.leaveRoom(room);\n      this.socket.emit('leave room',{\n         room: room,\n         user: this.props.user,\n      })\n   }\n\n   handleChange(e){\n      this.setState({\n         newTitle: e.currentTarget.value,\n      })\n   }\n\n\n   render(){\n      let rooms = this.props.rooms || {};\n      let roomIds = [];\n      console.log(\"Dashboard rendered\");\n      Object.keys(rooms).forEach(key => {\n         roomIds.push(rooms[key]._id);  \n      });\n\n      return(\n         <div>\n               <Sidebar \n                  createNewRoom = {this.createNewRoom}\n                  newTitle={this.state.newTitle}\n                  handleChange={this.handleChange}\n                  joinRoom={this.joinRoom}\n                  roomsAvailable={this.state.roomsAvailable}\n                  rooms={this.props.rooms}\n                  messages={this.props.messages}\n                  allRooms = {this.state.all}\n               />\n            <div className=\"chatbox-list\" >\n               {\n                  roomIds.map(id=>\n                     {\n                        return (\n                           <ChatBox leaveRoom={this.leaveRoom} roomId={id} key={id} socket={this.socket}/>\n                        )\n                     }\n                  )\n               }  \n            </div>\n\n         </div>\n      )\n   }\n}\n\n\nexport default DashBoard;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/room_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/util/message_api_util.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/side_bar.jsx",["176"],"import React from 'react';\nimport {getRoomUsers} from '../../util/room_api_util'\nimport SearchBarDropdown from './search_dropdown'\n\nclass Sidebar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            show_rooms: false,\n            searchInput: '',\n            dropDown: false\n        };\n        this.handleSearchInput = this.handleSearchInput.bind(this);\n        this.handleDropDown = this.handleDropDown.bind(this);\n        this.displayRooms = this.displayRooms.bind(this);\n        this.hideRooms = this.hideRooms.bind(this);\n    }\n\n    handleSearchInput(e){\n        this.setState({searchInput: e.currentTarget.value, dropDown: true});\n    };\n\n    handleDropDown(){\n        this.setState({dropDown: false});\n    };\n\n    displayRooms(){\n        this.state.show_rooms === true ? \n        this.setState({show_rooms: false}) : this.setState({show_rooms: true});\n    };\n\n    hideRooms(){\n        this.setState({show_rooms:false});\n    };\n\n\n\n\n    render(){\n        let roomsAvailable = this.props.roomsAvailable.data || [];\n\n        return(\n            <div className='sidebar-contaier'>\n                <div className='search-bar-container'>\n                    <input \n                        className='search-bar' \n                        type='text'\n                        onChange={this.handleSearchInput}\n                        onKeyDown={this.handleDropDown}\n                        value={this.state.searchInput}\n                        placeholder='type here to search'\n                    />\n                    {this.state.dropDown && this.state.searchInput.length !== 0 ? \n                        <SearchBarDropdown className='search-bar-dropdown-container'\n                            handleDropDown={this.handleDropDown}\n                            dropdown={this.state.dropdown} \n                            searchInput={this.state.searchInput} \n                            roomsJoined={this.props.rooms} \n                            messages={this.props.messages}  \n                            allRooms={this.props.allRooms}\n                            roomsAvailable={this.props.roomsAvailable}\n                            joinRoom={this.props.joinRoom}/>\n                        : null\n                    }\n                </div>\n                <div>\n                    <form onSubmit={this.props.createNewRoom}>\n                        <input type=\"text\" value={this.props.newTitle} \n                        onChange={this.props.handleChange}\n                        placeholder=\"Enter new room title\"/>\n                    </form>\n                    <button onClick={this.props.createNewRoom}>Create a New Chat Room</button>\n                </div>\n\n                <div>\n                    <button onClick={()=>this.displayRooms()}>Display All Joinable Chatrooms</button>\n                </div>\n                <div onMouseLeave={this.hideRooms}>\n                    {this.state && this.state.show_rooms === true ? \n                    roomsAvailable.map(room => {\n                     return (\n                        <li id={room._id} key={room._id}>\n                        <p>\n                            Title: {room.title}\n                        </p>\n                        <p>\n                            Number of current users: {room.users.length}\n                        </p>\n                        <button id={room._id} onClick={this.props.joinRoom}>Join Room</button>\n                        </li>\n                     )\n                  }) : null}\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default Sidebar;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/chat_box.jsx",["177"],"import React from \"react\"\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport UserList  from './user_list.js';\nimport './chatbox.css'\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy_container\"\n\nclass ChatBox extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatMessage: \"\",\n      open: true,\n      openOrClose: 'close',\n      emojiPicker: false,\n      giphyMessage: \"\"\n    }\n    this.toggle = this.toggle.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n    this.openEmoji = this.openEmoji.bind(this);\n    this.selectEmoji = this.selectEmoji.bind(this);\n    this.useGiphy = this.useGiphy.bind(this);\n    this.submitGiphy = this.submitGiphy.bind(this);\n  }\n\n\n  componentDidMount(){\n    let roomId = this.props.room._id;\n\n    this.props.socket.on(`MTC_${roomId}`, msg =>{\n       //this message has been saved to the database, now need to update redux and components\n      console.log(msg);\n    \n      let newMessage = {\n        id: msg._id,\n        message: msg.message,\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt,\n        room: msg.room,\n        sender: msg.sender,\n        username: msg.username,\n      }\n      this.props.afterMessageSent(newMessage);      \n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot){\n    ;\n    // prevProps.room.messages.length\n    // this.props.room.messages.length\n\n  }    \n\n  handleChange(e){\n    this.setState({\n      chatMessage: e.currentTarget.value,\n    })\n  }\n\n  selectEmoji(e, emojiObject){\n    let newMessage = this.state.chatMessage + emojiObject.emoji;\n    this.setState({\n      chatMessage: newMessage\n    })\n  }\n\n  openEmoji(){\n    this.state.emojiPicker === true ? \n      this.setState({emojiPicker: false}) :\n      this.setState({emojiPicker: true})\n  }\n  submitMessage(e) {\n    if (e) { e.preventDefault()}\n    //add room id to props\n    let username = this.props.user.username;\n    let userId = this.props.user.id;\n    let room = this.props.room;\n\n    let timestamp = moment().format('LT');\n    let message = this.state.chatMessage;\n     \n    this.props.socket.emit(\"Create Message\", {\n      message,\n      timestamp,\n      username,\n      userId,\n      room\n    })\n\n    this.setState({\n      chatMessage: \"\",\n    })\n\n    const ele = document.getElementById(`charbox-item-${room.title}`);\n    ele.scrollTop = ele.scrollHeight;\n\n\n  }\n\n  toggle(){\n    this.state.open ? \n    this.setState({open: false, openOrClose: 'open'}) : \n    this.setState({open: true, openOrClose: 'close'});\n  }\n\n  submitGiphy(){\n\n    let username = this.props.user.username;\n    let userId = this.props.user.id;\n    let room = this.props.room;\n\n    let timestamp = moment().format('LT');\n    let message = this.state.giphyMessage;\n     \n    this.props.socket.emit(\"Create Message\", {\n      message,timestamp, username, userId, room\n    })\n  \n    this.setState({\n      giphyMessage: \"\"\n    })\n  }\n\n  useGiphy(e){\n\n    let newMessage = `${e.target.src}`;\n    this.setState({\n      giphyMessage: newMessage\n    }, this.submitGiphy)\n\n  }\n  render() {\n    let messages = this.props.room.messages || [];\n    let users = this.props.room.users || [];\n\n     \n    return (\n      <div className={this.state.open ? 'open' : 'close'}> <button onClick={this.toggle}>{this.state.openOrClose}</button>\n        {this.state.open ? (\n          <div className=\"chatbox-container\" id={`charbox-item-${this.props.room.title}`}>\n\n            <h1>{this.props.room.title}</h1>\n            <div className='input-container' >\n              <button onClick={this.props.leaveRoom} id={this.props.roomId}>Leave Room</button>\n              <form onSubmit={this.submitMessage}>\n\n                <input type=\"text\" value={this.state.chatMessage} onChange={this.handleChange} />\n              </form>\n                {this.state.emojiPicker === false ? \n                <button onClick={this.openEmoji} > ☺ </button> : \n              <div onMouseLeave= {this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n\n              <Giphy useGiphy={this.useGiphy}/>\n            </div>\n            <ul>\n              {messages.map(msg => {\n                if(msg.message.includes(\"giphy\")){\n                  return <li key={msg.id}>{(msg.sender) === null? null:msg.username} says: <img className=\"chat-img\" src={msg.message} alt=\"image\"/></li>\n                }else{\n                  return <li key={msg.id} id={`msg-${this.props.room.title}-${messages.indexOf(msg)}`}>{(msg.sender) === null ? null:msg.username} says: {msg.message}</li>\n                }\n              })}\n            </ul>\n            <UserList users={users}/>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n\n}\n\n\nexport default ChatBox;","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/user_list.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/chat/search_dropdown.jsx",["178","179","180"],"import React from 'react';\nimport {connect} from 'react-redux';\n\nclass SearchBarDropdown extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.removeEmojis = this.removeEmojis.bind(this);\n        this.listedMessages = this.listedMessages.bind(this);\n        this.objectifiedMessages = this.objectifiedMessages.bind(this);\n        this.filteredRooms = this.filteredRooms.bind(this);\n        this.boyer_moore = this.boyer_moore.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    };\n\n    removeEmojis(string) {//function to replace emojis from https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n        const regex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n        return string.replace(regex, \" \");\n    };\n    \n\n    \n    listedMessages(obj){//get an object with roomJoined's title as the key and each room's messages as values\n        const messageArr = [];\n        Object.entries(obj).forEach(room => {\n            const title = [room[1].title];\n            const messages = room[1].messages.map(m=>(m.message));\n            const newArr = title.concat(messages)\n            messageArr.push(newArr);\n        });\n        return messageArr; \n    };\n\n    objectifiedMessages(obj){//get an object with roomJoined's title as the key and each room's messages as values\n        const newObj = {}        \n        Object.entries(obj).forEach(room => {\n            newObj[room[1].title]=room[1].messages.map(m=>(m.message));\n        });\n        return newObj;\n    };\n\n    filteredRooms(sub){//display a list of matching rooms\n        const {allRooms} = this.props;\n        const roomList = allRooms.map(room=>{\n            \n            return room.title\n        });\n        let filteredRooms = [];\n        for(let r=0; r<roomList.length; r++){\n            let skip;\n            let bad_char = new Array(265).fill(-1);\n\n            for(let t=0; t<sub.length; t++){//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                const index = sub[t].charCodeAt();\n                bad_char[index] = t;\n            };\n\n            for(let i=0; i<=roomList[r].length-sub.length; i+=skip){//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                skip=0;\n                for(let j = sub.length-1; j>=0; j--){\n                    if(sub[j].toLowerCase() != roomList[r][i+j].toLowerCase()){\n                        const asciiIndex = bad_char[roomList[r][i+j].charCodeAt()];\n                        skip = 1 > j-asciiIndex ? 1 : j-asciiIndex;\n                        break;\n                    }\n                };\n                if(skip === 0){\n                    filteredRooms.push([roomList[r]]);\n                    skip++;\n                    break\n                }\n            }\n        }\n        return filteredRooms; //return list of object with matching room name as key and character index as value \n    };\n\n    boyer_moore(arr, sub){//customized seaching function based on Boyer Moore searchign algorithm for faster lookup\n        let filteredMessages = [];\n        arr.forEach(room => {//iterating thru rooms\n            for(let r=1; r<room.length; r++){//iterating thru messages in each room\n                if(room[r].slice(0,8) !== 'https://' && room[r].slice(room[r].length-4, room[r].length) !== '.gif' && \n                room[r].slice(0,4) !== '<img' && room[r].slice(room[r].length-1, room[r].length) !== '>'){//skipiing gifs\n                    room[r] = this.removeEmojis(room[r]);\n                    let skip;\n                    let searchObj = {};\n                    let bad_char = new Array(265).fill(-1);\n\n                    for(let t=0; t<sub.length; t++){//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                        const index = sub[t].charCodeAt();\n                        bad_char[index] = t;\n                    };\n\n                    for(let i=0; i<=room[r].length-sub.length; i+=skip){//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                        skip=0;\n                        for(let j = sub.length-1; j>=0; j--){\n                            if(sub[j].toLowerCase() != room[r][i+j].toLowerCase()){\n                                const asciiIndex = bad_char[room[r][i+j].charCodeAt()];\n                                skip = 1 > j-asciiIndex ? 1 : j-asciiIndex;\n                                break;\n                            }\n                        };\n                        if(skip === 0){\n                            filteredMessages.push([room[0],r-1,i]);\n                            skip++;\n                        }\n                    }\n                }\n            }\n        });\n        \n        return filteredMessages; //this returns an array: [room_title, message_index, matching_character_index]\n    };\n\n    handleClick(id){\n        const ele = document.getElementById(id);\n        ele.scrollIntoView();\n        this.props.handleDropDown();\n    };\n\n    render() {\n        let {roomsJoined, allRooms, roomsAvailable, searchInput} = this.props;\n        if(allRooms !== undefined && roomsAvailable.data !== undefined){\n            allRooms = allRooms.map(r=>(Object.values(r))).map(roomTitle=>(roomTitle[3])); //return an array of all of the room titles [\"Dave's Room #1\", \"sss\", \"hahaha\", \"heyheyhey\", \"lala\", \"blah\", \"yoyo\", \"Cars\", \"new new new\"]\n            roomsAvailable = roomsAvailable.data.map(r=>(Object.values(r))).map(roomTitle=>(roomTitle[3])) || []; //return an array of all the rooms available to join\n        }\n        const roomArr = this.listedMessages(roomsJoined);  \n        const roomsDisplayed = roomArr.map(r=>(r[0]));\n        const availableRoomObj = this.objectifiedMessages(roomsJoined);\n        const matchedMessages = this.boyer_moore(roomArr, searchInput).map(m=>{\n            return [availableRoomObj[m[0]][m[1]].slice(m[2]), m[0], m[1]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n        const matchedRooms = this.filteredRooms(searchInput).map(room=>{\n            return room[0];\n        });\n        const roomsJoinable = matchedRooms.filter(room=>(roomsAvailable.includes(room)));\n        const roomsOpened = matchedRooms.filter(room=>(roomsDisplayed.includes(room)));\n\n\n        debugger\n        return (\n                <div className='searchbar-dropdown'>\n                    <div className='message-results'>\n                        {matchedMessages.length === 0 ? \n                            <p>No Match Found</p> \n                        : \n                        <ul>\n                            {matchedMessages.map(m=>{\n                                return(\n                                    <li onClick={()=>this.handleClick(`msg-${m[1]}-${m[2]}`)}>\n                                        Message: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                    </div>\n                    <p>------------------------------</p>\n                    <div className='room-results'>\n                        {matchedRooms.length === 0 ? \n                            <p>No Match Found</p> \n                        : \n                        <ul>\n                            {roomsJoinable.length === 0 ? null : \n                                \n                                roomsJoinable.map(r=>{\n                                    return (\n                                        <li>\n                                            {r}\n                                            <p>Rooms Not Joined</p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            {roomsOpened.length === 0 ? null :  \n                                roomsOpened.map(r=>{\n                                    return (\n                                        <li>{r}</li>\n                                    )\n                                })\n                            }\n                        </ul>}\n                        \n                    </div>\n                </div>\n        )      \n    }  \n};\n\n\n\nexport default (SearchBarDropdown);","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/giphy/giphy.jsx",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/message.jsx",["181"],"import React, { Component } from 'react';\nimport EditMessageForm from './edit_message_form_container.js';\n\nexport default class Message extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.editMessage = this.editMessage.bind(this);\n    this.deleteMessage = this.deleteMessage.bind(this);\n    this.deleteGif = this.deleteGif.bind(this);\n  }\n\n  componentDidMount(){\n    this.props.socket.on(\"Message Edited\", this.editMessage);\n    this.props.socket.on(\"Message Deleted\", this.deleteMessage);\n  }\n\n  editMessage(msg){\n    if (msg._id === this.props.msg.id){\n      this.props.editMessage(msg);\n    }\n  }\n\n  deleteMessage(msg){\n    if (msg._id === this.props.msg.id) {\n      this.props.deleteMessage(msg);\n    }\n  }\n\n  deleteGif(){\n    let response = window.confirm(`Are you sure you want to delete your Gif?`);\n    if (response) {\n      this.props.socket.emit(\"Delete Message\", this.props.msg);\n    }\n  }\n\n  render() {\n    //show edit button only if current user was the author of this message\n    //open edit message textfield form if button is clicked\n    //use socket to edit database and all connected users' message\n    //update redux state (room and messages)\n    let msg = this.props.msg;\n    let author = false;\n  \n    if (msg.sender === this.props.user.id){\n       author = true;\n     }\n    \n    let message;\n    if (msg.message.includes('giphy')){\n      message = <li key={msg.id}>{msg.username} says: <img className=\"chat-img\" src={msg.message} alt=\"image\" />\n        {author && \n          <button onClick={this.deleteGif}>Delete Gif</button>\n        }\n      </li>\n    } else {\n      message = <li key={msg.id}>{msg.username} says: {msg.message}\n        {author &&\n          <EditMessageForm socket={this.props.socket} msg={msg}/>\n        }\n      </li>\n    }\n\n\n    return (\n      message\n    )\n  }\n}\n","/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form_container.js",[],"/Users/davidpease/Documents/App Academy/Pillar/frontend/src/components/message/edit_message_form.jsx",[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":3,"column":18,"nodeType":"188","messageId":"189","endLine":3,"endColumn":23},{"ruleId":"190","severity":1,"message":"191","line":10,"column":1,"nodeType":"192","endLine":32,"endColumn":2},{"ruleId":"186","severity":1,"message":"193","line":1,"column":77,"nodeType":"188","messageId":"189","endLine":1,"endColumn":89},{"ruleId":"186","severity":1,"message":"194","line":1,"column":91,"nodeType":"188","messageId":"189","endLine":1,"endColumn":104},{"ruleId":"186","severity":1,"message":"195","line":1,"column":10,"nodeType":"188","messageId":"189","endLine":1,"endColumn":22},{"ruleId":"186","severity":1,"message":"196","line":4,"column":9,"nodeType":"188","messageId":"189","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"197","line":5,"column":10,"nodeType":"188","messageId":"189","endLine":5,"endColumn":15},{"ruleId":"186","severity":1,"message":"196","line":3,"column":9,"nodeType":"188","messageId":"189","endLine":3,"endColumn":17},{"ruleId":"198","severity":1,"message":"199","line":68,"column":37,"nodeType":"200","messageId":"201","endLine":68,"endColumn":39},{"ruleId":"186","severity":1,"message":"193","line":2,"column":9,"nodeType":"188","messageId":"189","endLine":2,"endColumn":21},{"ruleId":"186","severity":1,"message":"202","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":60,"column":45,"nodeType":"200","messageId":"201","endLine":60,"endColumn":47},{"ruleId":"186","severity":1,"message":"203","line":84,"column":25,"nodeType":"188","messageId":"189","endLine":84,"endColumn":34},{"ruleId":"198","severity":1,"message":"199","line":95,"column":53,"nodeType":"200","messageId":"201","endLine":95,"endColumn":55},{"ruleId":"204","severity":1,"message":"205","line":52,"column":55,"nodeType":"206","endLine":52,"endColumn":113},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'getRoomUsers' is defined but never used.","'leaveRoomUtil' is defined but never used.","'authenticate' is defined but never used.","'Redirect' is defined but never used.","'login' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'io' is defined but never used.","'searchObj' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]