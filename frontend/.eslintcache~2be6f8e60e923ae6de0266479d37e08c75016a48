[{"/Users/jae/Documents/Pillar/frontend/src/index.js":"1","/Users/jae/Documents/Pillar/frontend/src/components/root.js":"2","/Users/jae/Documents/Pillar/frontend/src/util/giphy_api_util.js":"3","/Users/jae/Documents/Pillar/frontend/src/util/room_api_util.js":"4","/Users/jae/Documents/Pillar/frontend/src/store/store.js":"5","/Users/jae/Documents/Pillar/frontend/src/util/session_api_util.js":"6","/Users/jae/Documents/Pillar/frontend/src/actions/session_actions.js":"7","/Users/jae/Documents/Pillar/frontend/src/components/app.js":"8","/Users/jae/Documents/Pillar/frontend/src/reducers/root_reducer.js":"9","/Users/jae/Documents/Pillar/frontend/src/util/route_util.js":"10","/Users/jae/Documents/Pillar/frontend/src/components/main/main_page.js":"11","/Users/jae/Documents/Pillar/frontend/src/components/session/login_form_container.js":"12","/Users/jae/Documents/Pillar/frontend/src/components/session/signup_form_container.js":"13","/Users/jae/Documents/Pillar/frontend/src/reducers/session_reducer.js":"14","/Users/jae/Documents/Pillar/frontend/src/components/chat/dashboard_container.js":"15","/Users/jae/Documents/Pillar/frontend/src/reducers/errors_reducer.js":"16","/Users/jae/Documents/Pillar/frontend/src/reducers/messages_reducer.js":"17","/Users/jae/Documents/Pillar/frontend/src/reducers/rooms_reducer.js":"18","/Users/jae/Documents/Pillar/frontend/src/reducers/session_errors_reducer.js":"19","/Users/jae/Documents/Pillar/frontend/src/actions/room_actions.js":"20","/Users/jae/Documents/Pillar/frontend/src/actions/message_actions.js":"21","/Users/jae/Documents/Pillar/frontend/src/components/chat/dashboard.jsx":"22","/Users/jae/Documents/Pillar/frontend/src/util/message_api_util.js":"23","/Users/jae/Documents/Pillar/frontend/src/components/chat/chat_box_container.js":"24","/Users/jae/Documents/Pillar/frontend/src/components/chat/side_bar_container.js":"25","/Users/jae/Documents/Pillar/frontend/src/components/chat/chat_box.jsx":"26","/Users/jae/Documents/Pillar/frontend/src/components/chat/side_bar.jsx":"27","/Users/jae/Documents/Pillar/frontend/src/components/chat/user_list.js":"28","/Users/jae/Documents/Pillar/frontend/src/components/chat/data_share.js":"29","/Users/jae/Documents/Pillar/frontend/src/components/message/message_container.js":"30","/Users/jae/Documents/Pillar/frontend/src/components/chat/search_dropdown.jsx":"31","/Users/jae/Documents/Pillar/frontend/src/components/giphy/giphy.jsx":"32","/Users/jae/Documents/Pillar/frontend/src/components/message/message.jsx":"33","/Users/jae/Documents/Pillar/frontend/src/components/message/replies_container.js":"34","/Users/jae/Documents/Pillar/frontend/src/components/message/replies.jsx":"35","/Users/jae/Documents/Pillar/frontend/src/components/message/edit_message_form_container.js":"36","/Users/jae/Documents/Pillar/frontend/src/components/message/edit_reply_form.jsx":"37","/Users/jae/Documents/Pillar/frontend/src/components/message/edit_message_form.jsx":"38","/Users/jae/Documents/Pillar/frontend/src/reducers/modal_reducer.js":"39","/Users/jae/Documents/Pillar/frontend/src/components/splash/splash_page_container.js":"40","/Users/jae/Documents/Pillar/frontend/src/components/modal/modal.jsx":"41","/Users/jae/Documents/Pillar/frontend/src/actions/modal_actions.js":"42","/Users/jae/Documents/Pillar/frontend/src/components/splash/splash_page.jsx":"43","/Users/jae/Documents/Pillar/frontend/src/components/session/session_form.js":"44"},{"size":1901,"mtime":1611714214702,"results":"45","hashOfConfig":"46"},{"size":286,"mtime":1611679565359,"results":"47","hashOfConfig":"46"},{"size":113,"mtime":1611679565364,"results":"48","hashOfConfig":"46"},{"size":1120,"mtime":1611679565364,"results":"49","hashOfConfig":"46"},{"size":507,"mtime":1611679565363,"results":"50","hashOfConfig":"46"},{"size":550,"mtime":1611679565364,"results":"51","hashOfConfig":"46"},{"size":2197,"mtime":1611679565355,"results":"52","hashOfConfig":"46"},{"size":728,"mtime":1611714122207,"results":"53","hashOfConfig":"46"},{"size":361,"mtime":1611710372150,"results":"54","hashOfConfig":"46"},{"size":1030,"mtime":1611679565364,"results":"55","hashOfConfig":"46"},{"size":258,"mtime":1611679565358,"results":"56","hashOfConfig":"46"},{"size":606,"mtime":1611710372149,"results":"57","hashOfConfig":"46"},{"size":658,"mtime":1611710372149,"results":"58","hashOfConfig":"46"},{"size":737,"mtime":1611679565362,"results":"59","hashOfConfig":"46"},{"size":920,"mtime":1611679565356,"results":"60","hashOfConfig":"46"},{"size":172,"mtime":1611679565361,"results":"61","hashOfConfig":"46"},{"size":1779,"mtime":1611679565362,"results":"62","hashOfConfig":"46"},{"size":2531,"mtime":1611679565362,"results":"63","hashOfConfig":"46"},{"size":429,"mtime":1611679565362,"results":"64","hashOfConfig":"46"},{"size":2192,"mtime":1611679565355,"results":"65","hashOfConfig":"46"},{"size":1069,"mtime":1611679565355,"results":"66","hashOfConfig":"46"},{"size":8827,"mtime":1611710372146,"results":"67","hashOfConfig":"46"},{"size":302,"mtime":1611679565364,"results":"68","hashOfConfig":"46"},{"size":854,"mtime":1611679565356,"results":"69","hashOfConfig":"46"},{"size":1151,"mtime":1611710372148,"results":"70","hashOfConfig":"46"},{"size":5888,"mtime":1611710372143,"results":"71","hashOfConfig":"46"},{"size":7224,"mtime":1611713108141,"results":"72","hashOfConfig":"46"},{"size":333,"mtime":1611679565357,"results":"73","hashOfConfig":"46"},{"size":375,"mtime":1611679565357,"results":"74","hashOfConfig":"46"},{"size":680,"mtime":1611679565359,"results":"75","hashOfConfig":"46"},{"size":14350,"mtime":1611679565357,"results":"76","hashOfConfig":"46"},{"size":2697,"mtime":1611679565358,"results":"77","hashOfConfig":"46"},{"size":2348,"mtime":1611679565358,"results":"78","hashOfConfig":"46"},{"size":562,"mtime":1611679565359,"results":"79","hashOfConfig":"46"},{"size":6760,"mtime":1611679565359,"results":"80","hashOfConfig":"46"},{"size":579,"mtime":1611679565358,"results":"81","hashOfConfig":"46"},{"size":2362,"mtime":1611679565358,"results":"82","hashOfConfig":"46"},{"size":1916,"mtime":1611679565358,"results":"83","hashOfConfig":"46"},{"size":282,"mtime":1611710372150,"results":"84","hashOfConfig":"46"},{"size":367,"mtime":1611710372150,"results":"85","hashOfConfig":"46"},{"size":1002,"mtime":1611710372148,"results":"86","hashOfConfig":"46"},{"size":245,"mtime":1611710372140,"results":"87","hashOfConfig":"46"},{"size":594,"mtime":1611710372150,"results":"88","hashOfConfig":"46"},{"size":3507,"mtime":1611710372149,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zixcr2",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/jae/Documents/Pillar/frontend/src/index.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/root.js",[],["189","190"],"/Users/jae/Documents/Pillar/frontend/src/util/giphy_api_util.js",[],"/Users/jae/Documents/Pillar/frontend/src/util/room_api_util.js",[],"/Users/jae/Documents/Pillar/frontend/src/store/store.js",[],"/Users/jae/Documents/Pillar/frontend/src/util/session_api_util.js",[],"/Users/jae/Documents/Pillar/frontend/src/actions/session_actions.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/app.js",["191","192","193"],"/Users/jae/Documents/Pillar/frontend/src/reducers/root_reducer.js",[],"/Users/jae/Documents/Pillar/frontend/src/util/route_util.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/main/main_page.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/session/login_form_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/session/signup_form_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/reducers/session_reducer.js",["194"],"import { RECEIVE_CURRENT_USER, \n         RECEIVE_USER_LOGOUT, \n         RECEIVE_USER_SIGN_IN } from '../actions/session_actions';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {}\n};\n\nexport default function(state = initialState, action) {\n  ;\n  switch (action.type) {\n    case RECEIVE_CURRENT_USER:\n      // console.log(action.currentUser)\n      ;\n      return {\n        ...state,\n        isAuthenticated: !!action.currentUser,\n        user: action.currentUser\n      };\n    case RECEIVE_USER_LOGOUT:\n      return {\n        isAuthenticated: false,\n        user: undefined\n      };\n    case RECEIVE_USER_SIGN_IN:\n      return ({\n        ...state,\n        isSignedIn: true\n      })\n    default:\n      ;\n      return state;\n  }\n}","/Users/jae/Documents/Pillar/frontend/src/components/chat/dashboard_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/reducers/errors_reducer.js",[],"/Users/jae/Documents/Pillar/frontend/src/reducers/messages_reducer.js",["195"],"import { debug } from 'request';\nimport { RECEIVE_MESSAGES, RECEIVE_NEW_MESSAGE, UPDATE_MESSAGE, REMOVE_MESSAGE } from '../actions/message_actions';\nimport { RECEIVE_ROOMS, DELETE_ROOM, RECEIVE_ROOM } from '../actions/room_actions';\n\nconst MessagesReducer = (state = { }, action) => {\n  Object.freeze(state);\n   ;\n  let newState = Object.assign({}, state);\n  switch (action.type) {\n    case RECEIVE_MESSAGES:\n      newState = action.messages;\n      return newState;\n    case RECEIVE_NEW_MESSAGE:\n       \n      Object.assign(newState, {[action.message.id]: action.message});\n      return newState;\n    case RECEIVE_ROOMS:\n      let messages = {};\n      //create messages object\n      //  ;\n      ;\n      action.rooms.data.forEach(room => {\n        room.messages.forEach(msg => {\n          messages[msg._id] = {\n            id: msg._id,\n            message: msg.message,\n            createdAt: msg.createdAt,\n            updatedAt: msg.updatedAt,\n            room: msg.room,\n            sender: msg.sender === null ? null : msg.sender._id,\n            username: msg.sender === null ? null : msg.sender.username,\n          }\n        })\n      });\n      Object.assign(newState, messages);\n      return newState;\n    case RECEIVE_ROOM:\n\n       ;\n      return state;\n    case UPDATE_MESSAGE:\n      action.message.id = action.message._id; //rename the id property key\n      delete action.message._id;\n      newState[action.message.id] = action.message;\n      return newState;\n    case REMOVE_MESSAGE:\n       \n      delete newState[action.message._id];\n      return newState;\n    case DELETE_ROOM:\n       \n      action.room.messages.forEach(msgId =>{\n        delete newState[msgId];\n      });\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default MessagesReducer;","/Users/jae/Documents/Pillar/frontend/src/reducers/rooms_reducer.js",[],"/Users/jae/Documents/Pillar/frontend/src/reducers/session_errors_reducer.js",[],"/Users/jae/Documents/Pillar/frontend/src/actions/room_actions.js",["196","197","198","199"],"import { getRoom, getRooms, deleteRoomUtil, updateRoomUtil, createRoomUtil, getRoomUsers, leaveRoomUtil, editRoomClosedForUtil} from '../util/room_api_util';\n\nexport const RECEIVE_ROOMS = \"RECEIVE_ROOMS\";\nexport const RECEIVE_ROOM = \"RECEIVE_ROOM\";\nexport const DELETE_ROOM = \"DELETE_ROOM\";\nexport const UPDATE_ROOM = \"UPDATE_ROOM\";\nexport const LEAVE_ROOM = \"LEAVE_ROOM\";\n//export const RECEIVE_NEW_MESSAGE = \"RECEIVE_NEW_MESSAGE\";\nexport const RECEIVE_ROOM_USERS = \"RECEIVE_ROOM_USERS\";\nexport const CHAT_ROOM_STATUS = 'CHAT_ROOM_STATUS';\n\n\nexport const receiveRooms = rooms => ({\n  type: RECEIVE_ROOMS,\n  rooms\n});\n\nexport const deleteRoom = room => ({\n  type: DELETE_ROOM,\n  room\n});\n\nexport const updateRoom = room => ({\n  type: UPDATE_ROOM,\n  room\n})\n\nexport const exitRoom = room => ({\n  type: LEAVE_ROOM,\n  room\n})\n\nexport const receiveRoom = room => ({\n  type: RECEIVE_ROOM,\n  room\n})\n\nexport const chatRoomStatus = data => ({\n  type: CHAT_ROOM_STATUS,\n  data\n})\n\nexport const chatRoomSwitch = data => dispatch => {\n  dispatch(chatRoomStatus(data));\n};\n\n\nexport const fetchRoom = (roomId) => dispatch => (\n  getRoom(roomId)\n    .then(room => dispatch(receiveRoom(room)))\n    .catch(err => console.log(err))\n);\n\nexport const createRoom = room => dispatch => {\n  dispatch(receiveRoom(room))\n}\n\nexport const removeRoom = room => dispatch => (\n  dispatch(deleteRoom(room))\n  )\n\nexport const editRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n         \n      dispatch(updateRoom(room.data))\n    })\n)\nexport const updateUserList = room => dispatch => {\n    \n  dispatch(updateRoom(room));\n    \n}\n\nexport const leaveRoom = room => dispatch => (\n  updateRoomUtil(room)\n    .then(room => {\n       \n      dispatch(exitRoom(room.data))\n    })\n)\n\nexport const fetchRooms = (userId) => dispatch => (\n  getRooms(userId)\n    .then(rooms => {\n      dispatch(receiveRooms(rooms));\n    })\n    .catch(err => console.log(err))\n);\n\nexport const editClosedFor = (roomId, email, id) => dispatch => {\n   ;\n  return editRoomClosedForUtil(roomId, email, id)\n  .then(rooms => {\n     ;\n    // fetchRooms(id)\n    dispatch(receiveRooms(rooms));\n  })\n  // .catch(err => console.log(err))\n}\n","/Users/jae/Documents/Pillar/frontend/src/actions/message_actions.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/chat/dashboard.jsx",["200","201"],"import React from 'react';\n//import room from '../../../../validation/room';\nimport io from \"socket.io-client\";\nimport ChatBox from './chat_box_container';\nimport Sidebar from './side_bar_container'\nimport { getAvailableRooms, getRooms } from '../../util/room_api_util';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport \"./chatbox.css\"\nclass DashBoard extends React.Component{\n   constructor(props){\n      super(props);\n      this.socket = io();\n      \n      this.state = {\n         newTitle: \"\",\n         roomsAvailable: [],\n         roomsJoined: [],\n         all: [],\n         deletedRoom: null,\n         myRooms: this.props.user.rooms,\n         errors: [],\n      }\n      \n      this.createNewRoom = this.createNewRoom.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.joinRoom = this.joinRoom.bind(this);\n      this.leaveRoom = this.leaveRoom.bind(this);\n      this.userLeft = this.userLeft.bind(this);\n      this.userJoined = this.userJoined.bind(this);\n      this.deleteRoom = this.deleteRoom.bind(this);\n      this.roomDeleted = this.roomDeleted.bind(this);\n      this.ackDelete = this.ackDelete.bind(this);\n      this.roomCreated = this.roomCreated.bind(this);\n      this.addRoomCreationError = this.addRoomCreationError.bind(this);\n      \n   }\n\n   \n   //component did mount\n   componentDidMount(){\n      \n      this.props.getRooms(this.props.user.id); //this pings the database\n      \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      \n      this.socket.on(\"user left\", this.userLeft);\n      this.socket.on(\"user joined\", this.userJoined);\n      this.socket.on(\"room deleted\", this.roomDeleted);\n      this.socket.on(\"room created\", this.roomCreated);\n      this.socket.on(\"room creation error\", this.addRoomCreationError);\n   }\n\n   \n\n   componentDidUpdate(prevProps){\n      let user = this.props.user.username;\n      let rooms = this.props.rooms;\n      if (Object.keys(rooms).length != Object.keys(prevProps.rooms).length) {\n         \n         this.socket.emit(\"User connected\", { user, rooms });\n         this.props.getRooms(this.props.user.id); \n         \n         \n      getRooms(this.props.user.id)\n         .then(rooms => {\n            this.setState({\n               roomsJoined: rooms,\n            })\n         })\n         .then(()=>{\n            getAvailableRooms(this.props.user.id) //this pings the database                                \n            .then(rooms => {\n               this.setState({\n                  roomsAvailable: rooms,\n               })\n            })\n            .then(()=>{\n               this.setState({all: this.state.roomsAvailable.data.concat(this.state.roomsJoined.data)})\n            })\n         })\n      };\n      // if (this.props.rooms != prevProps) {\n      //    this.render()\n      // }\n   }\n\n   userLeft({ user, room }) { \n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)) {    \n         this.props.updateUserList(room);\n      }\n   }\n\n   userJoined({ user, room }) {\n      //check if this user belongs to the room\n      let currentRooms = Object.keys(this.props.rooms);\n\n      if (currentRooms.includes(room._id)){\n         //reformat the user object added to the room to match existing users\n         room.users.splice(room.users.length - 1, 1);\n         room.users.push({username: user.username, _id: user.id})\n         this.props.updateUserList(room);\n      }\n   }\n   \n   createNewRoom(e){\n      e.preventDefault();\n      e.stopPropagation();\n      let room = {\n         title: this.state.newTitle,\n         admin: this.props.user.id,\n         users: this.props.user.id,\n      }\n      this.socket.emit(\"Create Room\", room);\n      this.setState({\n         newTitle: \"\",\n         errors: []\n      })\n   }\n\n   roomCreated(room){\n       \n      let roomsJoined = cloneDeep(this.state.roomsJoined);\n      let roomsAvail = cloneDeep(this.state.roomsAvailable);\n      let allRooms = cloneDeep(this.state.all);\n      \n      if (room.admin === this.props.user.id){\n         this.props.createRoom(room);\n         roomsJoined.data.push(room);\n         this.setState({\n            roomsJoined: {data: roomsJoined.data},\n         })\n      } else {\n         roomsAvail.data.push(room);\n         this.setState({\n            roomsAvailable: {data: roomsAvail.data},\n         })\n      }\n       \n      allRooms.push(room);\n      this.setState({\n         all: allRooms,\n      })\n   }\n\n   addRoomCreationError({errors, room}){\n      \n      if(room.admin === this.props.user.id){\n         this.setState({\n            errors: [errors.text],\n         })\n      }\n   }\n\n   joinRoom(e){\n       \n      let room = this.state.roomsAvailable.data.filter(room => e.currentTarget.id === room._id ? room : null);\n      \n      room[0].users.push(this.props.user.id);\n      this.props.editRoom(room[0]);\n      \n      this.socket.emit('join room', {\n         room: room[0],\n         user: this.props.user,\n      })\n   }\n\n   leaveRoom(e){\n       \n      let room = cloneDeep(this.props.rooms[e.currentTarget.id]);\n      //find and remove current user from the room users array\n      for (let i = 0; i < room.users.length; i++){\n         if(room.users[i]._id === this.props.user.id){\n            room.users.splice(i, 1);\n         }\n      }\n       \n      this.props.leaveRoom(room);\n      this.socket.emit('leave room',{\n         room: room,\n         user: this.props.user,\n      })\n   }\n\n   deleteRoom(room){\n      this.socket.emit('delete room',{room, user: this.props.user});\n   }\n\n   roomDeleted({room, user}){\n      this.props.deleteRoom(room);\n      //check if this user was a member \n       \n      let roomMembers = room.users;\n      if (this.props.user.id !== room.admin && roomMembers.includes(this.props.user.id)){\n         this.setState({deletedRoom: room});\n         \n      } else {\n         //remove from available rooms list\n         let rmsAvail = cloneDeep(this.state.roomsAvailable);\n         let index = null;\n         for (let i = 0; i < rmsAvail.data.length; i++){\n            if(rmsAvail.data[i]._id === room._id){\n               index = i;\n            }\n         }\n\n         if (index) {\n            rmsAvail.data.splice(index, 1);\n         }\n\n         this.setState({\n            roomsAvailable: {data: rmsAvail.data}\n         })\n          \n      }\n\n      //remove from joined rooms list?\n\n   }\n\n   ackDelete(){\n      this.setState({deletedRoom: null});\n   }\n\n   handleChange(e){\n      this.setState({\n         newTitle: e.currentTarget.value,\n      })\n   };\n\n\n\n\n   render(){\n      let rooms = this.props.rooms || {};\n      if (rooms.length > 0){\n         // \n      }\n      let roomIds = [];\n      //   myRooms = this.state.myRooms;\n      console.log(\"Dashboard rendered\");\n      Object.keys(rooms).forEach(key => {\n         // ;\n         roomIds.push(rooms[key]._id);  \n      });\n      // rooms.forEach(room => {\n      //    ;\n      //    roomIds.push(room.roomId);\n      // });\n      // ;\n      return(\n         <div>\n               <Sidebar \n                  createNewRoom = {this.createNewRoom}\n                  newTitle={this.state.newTitle}\n                  handleChange={this.handleChange}\n                  joinRoom={this.joinRoom}\n                  roomsAvailable={this.state.roomsAvailable}\n                  allRooms = {this.state.all}\n                  errors = {this.state.errors}\n               />\n               {this.state.deletedRoom ? (\n                  <div className=\"deleted-room-alert\">\n                     <h3>{`\"${this.state.deletedRoom.title}\" was deleted by the admin.`}</h3>\n                     <button onClick={this.ackDelete}>OK</button>\n                  </div>\n                  ) : (null)            \n               }\n            <div className=\"chatbox-list\" >\n               {\n                  roomIds.map(id=>\n                     {\n                        // debugger;\n                        if (id !== undefined){\n                     return (this.props.rooms[id].closedFor.includes(this.props.user.email) ?\n                         \"\" :  <ChatBox leaveRoom={this.leaveRoom} deleteRoom={this.deleteRoom} roomId={id} key={id} socket={this.socket}/>\n                        )}\n                     }\n                  )\n               }  \n            </div>\n\n         </div>\n      )\n   }\n}\n\n\nexport default DashBoard;","/Users/jae/Documents/Pillar/frontend/src/util/message_api_util.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/chat/chat_box_container.js",["202","203","204","205","206","207","208"],"import { connect } from 'react-redux';\nimport { fetchMessages, afterMessageSent } from '../../actions/message_actions';\nimport ChatBox from './chat_box';\nimport { fetchRoom, fetchRooms, createRoom, removeRoom, editRoom, leaveRoom, updateUserList, editClosedFor} from '../../actions/room_actions';\n\n\nconst mapStateToProps = (state, ownProps) => {\n   \n   return {\n      user: state.session.user,\n      room: state.rooms[ownProps.roomId],\n      socket: ownProps.socket,\n   };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n   return {\n      getMessages: (roomId) => dispatch(fetchMessages(roomId)),\n      afterMessageSent: (msg) => {\n         dispatch(afterMessageSent(msg));\n      },\n      editClosedFor: (roomId, email, id) => dispatch(editClosedFor(roomId, email, id))\n   }\n}\n\nexport default connect(\n   mapStateToProps,\n   mapDispatchToProps\n)(ChatBox);","/Users/jae/Documents/Pillar/frontend/src/components/chat/side_bar_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/chat/chat_box.jsx",["209"],"import React from \"react\"\nimport io from \"socket.io-client\";\nimport moment from \"moment\";\nimport UserList  from './user_list.js';\nimport './chatbox.css'\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy\";\nimport Message from '../message/message_container';\nimport {switches} from './data_share'\n\nclass ChatBox extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatMessage: \"\",\n      open: true, //null\n      openOrClose: 'close',\n      emojiPicker: false,\n    }\n\n    // \n\n    this.toggle = this.toggle.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n    this.openEmoji = this.openEmoji.bind(this);\n    this.selectEmoji = this.selectEmoji.bind(this);\n    this.useGiphy = this.useGiphy.bind(this);\n    this.deleteRoom = this.deleteRoom.bind(this);\n    this.componentRefresh = this.componentRefresh.bind(this);\n  }\n\n\n  componentDidMount(){\n    let roomId = this.props.room._id;\n\n    this.props.socket.on(`MTC_${roomId}`, msg =>{\n       //this message has been saved to the database, now need to update redux and components\n      console.log(msg);\n       \n    // ;\n      let newMessage = {\n        id: msg._id,\n        message: msg.message,\n        createdAt: msg.createdAt,\n        updatedAt: msg.updatedAt,\n        room: msg.room,\n        sender: msg.sender,\n        username: msg.username,\n        replies: msg.replies\n      }\n      this.props.afterMessageSent(newMessage);      \n    });\n\n    \n    this.subscription = switches.receiveOpen().subscribe(roomTitle=>{\n      if(roomTitle === this.props.room.title){ //send an array or object with information about the room and open to true\n        this.setState({open: true});//change the open directly but has a logic to determine it is the right room\n      } \n    });\n    \n    if(this.props.room.closedFor.includes(this.props.user.email)){\n      this.setState({open: false})\n    } else {\n      this.setState({open: true})\n    }\n\n    window.addEventListener('beforeunload', this.componentRefresh(this.props))\n     \n  };\n\n  componentRefresh(props){\n    // let user = this.props.user.username;\n    let email = props.user.email;\n    let id = props.user.id;\n     \n    if(this.state.open === false){\n       \n      props.editClosedFor(props.room._id, email,  id)\n    }\n  };\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n    const props = this.props;\n    this.componentRefresh(props);\n    window.removeEventListener('beforeunload', this.componentRefresh);\n\n\n  };   \n\n  handleChange(e){\n    this.setState({\n      chatMessage: e.currentTarget.value,\n    })\n  }\n\n  selectEmoji(e, emojiObject){\n    let newMessage = this.state.chatMessage + emojiObject.emoji;\n    this.setState({\n      chatMessage: newMessage\n    })\n  }\n\n  openEmoji(){\n    this.state.emojiPicker === true ? \n      this.setState({emojiPicker: false}) :\n      this.setState({emojiPicker: true})\n  }\n\n  submitMessage(e) {\n    if (e) { e.preventDefault()}\n\n    let username = this.props.user.username;\n    let userId = this.props.user.id;\n    let room = this.props.room;\n\n    let timestamp = moment().format('LT');\n    let message = this.state.chatMessage;\n     \n    this.props.socket.emit(\"Create Message\", {\n      message,\n      timestamp,\n      username,\n      userId,\n      room\n    })\n\n    this.setState({\n      chatMessage: \"\",\n    })\n\n    const ele = document.getElementById(`chatbox-item-${room.title}`);\n    ele.scrollTop = ele.scrollHeight;\n\n\n  }\n\n  toggle(){\n    this.state.open ? \n    this.setState({open: false, openOrClose: 'open'}) : \n    this.setState({open: true, openOrClose: 'close'});\n  }\n\n  useGiphy(e){\n    this.props.socket.emit(\"Create Message\", {\n      message: `${e.target.src}`,\n      timestamp: moment().format('LT'), \n      username: this.props.user.username, \n      userId: this.props.user.id,\n      room: this.props.room,\n    })\n  }\n\n  deleteRoom(){\n    let response = window.confirm(`Are you sure you want to delete the room: \"${this.props.room.title}\"`)\n    if(response){\n      this.props.deleteRoom(this.props.room);\n    }\n  }\n\n  render() {\n    \n    let messages = this.props.room.messages.map((msg, index) => (<Message socket={this.props.socket} id={`msg-${this.props.room.title}-${index}`} msg={msg}/>)) || [];\n    let users = this.props.room.users || [];\n\n    return (\n      <div className={(this.state.open) ? 'open' : 'close'}> \n        {(this.state.open ) ? (\n          <div className=\"chatbox-container\" id={`chatbox-item-${this.props.room.title}`}>\n            <h1>{this.props.room.title}</h1>\n            <div className=\"message-area\">\n              <div className='input-container' >\n                <button onClick={this.props.leaveRoom} id={this.props.roomId}>Leave Room</button>\n                {\n                  this.props.user.id === this.props.room.admin ? (\n                    <button onClick={this.deleteRoom}>Delete Room</button>\n                  )\n                  :              \n                  (null)\n                }\n                <form onSubmit={this.submitMessage}>\n\n                  <input type=\"text\" value={this.state.chatMessage} onChange={this.handleChange} />\n                </form>\n                  {this.state.emojiPicker === false ? \n                  <button onClick={this.openEmoji} > ☺ </button> : \n                  <div onMouseLeave= {this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n\n                <Giphy useGiphy={this.useGiphy} roomTitle={this.props.room.title}/>\n              </div>\n              <ul>\n                  {messages}\n              </ul>\n            </div>\n            <UserList users={users}/>\n          </div>\n        ) : null}\n        <button className=\"toggle-room\" onClick={this.toggle}>{this.state.openOrClose}</button>\n      </div>\n    )\n  }\n\n}\n\n\nexport default ChatBox;","/Users/jae/Documents/Pillar/frontend/src/components/chat/side_bar.jsx",["210","211","212","213","214","215","216","217"],"/Users/jae/Documents/Pillar/frontend/src/components/chat/user_list.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/chat/data_share.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/message/message_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/chat/search_dropdown.jsx",["218","219"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { switches, switcheThread } from './data_share'\n\nconst mapStateToProps = (state) => {\n\n    return {\n        roomsJoined: state.rooms\n    };\n\n};\n\n\nclass SearchBarDropdown extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.removeEmojis = this.removeEmojis.bind(this);\n        this.listedMessages = this.listedMessages.bind(this);\n        this.findRepliesMasterMessage = this.findRepliesMasterMessage.bind(this);\n        this.objectifiedMessages = this.objectifiedMessages.bind(this);\n        this.filteredRooms = this.filteredRooms.bind(this);\n        this.objectifiedReplies = this.objectifiedReplies.bind(this);\n        this.boyer_moore = this.boyer_moore.bind(this);\n        this.handleOpen = this.handleOpen.bind(this);\n        this.handleClickChatroom = this.handleClickChatroom.bind(this);\n        this.handleClickThread = this.handleClickThread.bind(this);\n    };\n\n\n\n    removeEmojis(string) {//function to replace emojis from https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n        const regex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n        return string.replace(regex, \" \");\n    };\n\n\n\n    listedMessages(obj) {//get an object with roomJoined's title as the key and each room's messages as values\n        const messageArr = [];\n        Object.entries(obj).forEach(room => {\n            const title = [room[1].title]; //put title ar the index 0 in the messageArr\n            const messages = room[1].messages.map(m => (\n                m.message\n            ));\n            const newArr = title.concat(messages)\n            messageArr.push(newArr);\n        });\n        return messageArr;\n    };\n\n    findRepliesMasterMessage(reply, obj) {\n        const res = [];\n        Object.entries(obj).forEach(room => {\n            room[1].messages.forEach(m => {\n                if (m.replies.map(m => (m.reply)).includes(reply)) {\n                    return res.push(m.message)\n                };\n            });\n        });\n        return res;\n    };\n\n    listedReplies(obj) {\n        const repliesArr = [];\n        Object.entries(obj).forEach(room => {\n            let allReplies = [];\n            let title = [room[1].title];\n            let replies = room[1].messages.filter(m => {\n                return m.replies.length > 0\n            });\n            for (let i = 0; i < replies.length; i++) {\n                allReplies = allReplies.concat(replies[i].replies.map(r => (r.reply)));\n            }\n            const newArr = title.concat(allReplies)\n            repliesArr.push(newArr);\n        });\n        return repliesArr;\n    };\n\n    objectifiedMessages(arr) {//get an object with roomJoined's title as the key and each room's messages as values\n        const newObj = {}\n        Object.entries(arr).forEach(room => {\n            newObj[room[1].title] = room[1].messages.map(m => (m.message));\n        });\n        return newObj;\n    };\n\n    objectifiedReplies(arr) {\n        const repObj = {};\n        arr.forEach(room => {\n            repObj[room[0]] = room.slice(1);\n        });\n        return repObj;\n    };\n\n    filteredRooms(sub) {//display a list of matching rooms\n        const { allRooms } = this.props;\n        const roomList = allRooms.map(room => {\n\n            return room.title\n        });\n        let filteredRooms = [];\n        for (let r = 0; r < roomList.length; r++) {\n            let skip;\n            let bad_char = new Array(265).fill(-1);\n\n            for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                const index = sub[t].charCodeAt();\n                bad_char[index] = t;\n            };\n\n            for (let i = 0; i <= roomList[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                skip = 0;\n                for (let j = sub.length - 1; j >= 0; j--) {\n                    if (sub[j].toLowerCase() != roomList[r][i + j].toLowerCase()) {\n                        const asciiIndex = bad_char[roomList[r][i + j].charCodeAt()];\n                        skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                        break;\n                    }\n                };\n                if (skip === 0) {\n                    filteredRooms.push([roomList[r]]);\n                    skip++;\n                    break\n                }\n            }\n        }\n        return filteredRooms; //return list of object with matching room name as key and character index as value \n    };\n\n    boyer_moore(arr, sub) {//customized seaching function based on Boyer Moore searchign algorithm for faster lookup\n        let filteredMessages = [];\n        arr.forEach(room => {//iterating thru rooms\n            for (let r = 1; r < room.length; r++) {//iterating thru messages in each room\n                if (room[r].slice(0, 8) !== 'https://' && room[r].slice(room[r].length - 4, room[r].length) !== '.gif' &&\n                    room[r].slice(0, 4) !== '<img' && room[r].slice(room[r].length - 1, room[r].length) !== '>') {//skipiing gifs\n                    room[r] = this.removeEmojis(room[r]);\n                    let skip;\n                    let bad_char = new Array(265).fill(-1);\n\n                    for (let t = 0; t < sub.length; t++) {//constructing a bad character table for each chatacter in the substring at its corresponding place in 256 ASCII characters\n                        const index = sub[t].charCodeAt();\n                        bad_char[index] = t;\n                    };\n\n                    for (let i = 0; i <= room[r].length - sub.length; i += skip) {//compare each character from substring to string, if mismatch, then shift to the next matching character; if no matching character found, shift the entire length of the substring\n                        skip = 0;\n                        for (let j = sub.length - 1; j >= 0; j--) {\n                            if (sub[j].toLowerCase() != room[r][i + j].toLowerCase()) {\n                                const asciiIndex = bad_char[room[r][i + j].charCodeAt()];\n                                skip = 1 > j - asciiIndex ? 1 : j - asciiIndex;\n                                break;\n                            }\n                        };\n                        if (skip === 0) {\n                            filteredMessages.push([room[0], r - 1, i]);\n                            skip++;\n                        };\n                    }\n                }\n            }\n        });\n\n        return filteredMessages; //this returns an array: [room_title, message_index, matching_character_index]\n    };\n\n    handleOpen(id) {\n        const roomTitle = id.split('-');\n        let roomsJoined = this.props.roomsJoined\n        let email = this.props.user.email;\n        let userId = this.props.user.id;\n        for (let i = 0; i < Object.keys(roomsJoined).length; i++) {\n            if (roomsJoined[Object.keys(roomsJoined)[i]].title === roomTitle[1] && roomsJoined[Object.keys(roomsJoined)[i]].closedFor.includes(email)) {\n                let roomId = roomsJoined[Object.keys(roomsJoined)[i]]._id;\n                this.props.editClosedFor(roomId, email, userId)\n                    .then(rooms => {\n                        debugger\n                    })\n            }\n        }\n        switches.sendOpen(roomTitle[1]);//tells the chatroom to open\n    };\n    handleOpenThread(title) {\n        let roomsJoined = this.props.roomsJoined\n        let email = this.props.user.email;\n        let userId = this.props.user.id;\n        for (let i = 0; i < Object.keys(roomsJoined).length; i++) {\n            if (roomsJoined[Object.keys(roomsJoined)[i]].title === title && roomsJoined[Object.keys(roomsJoined)[i]].closedFor.includes(email)) {\n                let roomId = roomsJoined[Object.keys(roomsJoined)[i]]._id;\n                // let email = this.props.user.email;\n                // let userId = this.props.user.id;\n                this.props.editClosedFor(roomId, email, userId)\n                    .then(rooms => {\n                    })\n            }\n        }\n        switches.sendOpen(title);//tells the chatroom to open\n    };\n    async handleClickChatroom(id) {\n        await this.handleOpen(id)\n        setTimeout(() => {//open first then search the element\n            const ele = document.getElementById(id);\n            ele.scrollIntoView();\n            this.props.handleDropDown();\n        }, 600);\n    };\n    handleClickThread(id, room, msg) {\n        this.handleOpenThread(room);\n        switches.sendOpen(room);\n        setTimeout(() => {\n            switcheThread.sendOpenThread(msg);\n            setTimeout(() => {\n                const ele = document.getElementById(id);\n                ele.scrollIntoView();\n            })\n        }, 1200);\n        this.props.handleDropDown();\n    };\n\n\n\n    render() {\n        let { roomsJoined, allRooms, roomsAvailable, searchInput } = this.props;\n        if (allRooms !== undefined && roomsAvailable.data !== undefined) {\n            allRooms = allRooms.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all of the room titles [\"Dave's Room #1\", \"sss\", \"hahaha\", \"heyheyhey\", \"lala\", \"blah\", \"yoyo\", \"Cars\", \"new new new\"]\n            roomsAvailable = roomsAvailable.data.map(r => (Object.values(r))).map(roomTitle => (roomTitle[3])) || []; //return an array of all the rooms available to join\n        };\n\n        const roomArr = this.listedMessages(roomsJoined);\n        const repliesArr = this.listedReplies(roomsJoined);\n        const roomsDisplayed = roomArr.map(r => (r[0]));\n\n        const availableRoomObj = this.objectifiedMessages(roomsJoined);\n        const searchableReplies = this.objectifiedReplies(repliesArr);\n\n        const matchedMessages = this.boyer_moore(roomArr, searchInput).map(m => {\n            return [availableRoomObj[m[0]][m[1]].slice(m[2]), m[0], m[1]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n        const matchedRooms = this.filteredRooms(searchInput).map(room => {\n            return room[0];\n        });\n        const matchedReplies = this.boyer_moore(repliesArr, searchInput).map(m => {\n            return [searchableReplies[m[0]][m[1]].slice(m[2]), m[0], m[1], searchableReplies[m[0]][m[1]]]; //m[0] is the chatroom title; m[1] is the index number for the matching string in the array; and m[2] is the matching substring\n        });\n\n        //function to find the thread master for the reply using the searchableReplies[m[0]][m[1]] from line 190\n        const roomsJoinable = matchedRooms.filter(room => (roomsAvailable.includes(room)));\n        const roomsOpened = matchedRooms.filter(room => (roomsDisplayed.includes(room)));\n\n\n        return (\n            <div className='searchbar-dropdown'>\n                <div className='message-results'>\n                    {matchedMessages.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedMessages.map(m => {\n                                return (\n                                    <li onClick={() => this.handleClickChatroom(`msg-${m[1]}-${m[2]}`)}>\n                                        Message: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='replies-results'>\n                    {matchedReplies.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {matchedReplies.map(m => {\n                                const masterMessage = this.findRepliesMasterMessage(m[3], roomsJoined)//this should return a list of master messages\n                                return (\n                                    <li onClick={() => this.handleClickThread(`msg-reply-${m[3]}`, m[1], masterMessage[0])}>\n                                        Thread Replies: {m[0]} Room: {m[1]}\n                                    </li>\n                                )\n                            })}\n                        </ul>}\n                </div>\n                <p>------------------------------</p>\n                <div className='room-results'>\n                    {matchedRooms.length === 0 ?\n                        <p>No Match Found</p>\n                        :\n                        <ul>\n                            {roomsJoinable.length === 0 ? null :\n\n                                roomsJoinable.map(r => {\n                                    return (\n                                        <li>\n                                            {r}\n                                            <p>Rooms Not Joined</p>\n                                        </li>\n                                    )\n                                })\n                            }\n                            {roomsOpened.length === 0 ? null :\n                                roomsOpened.map(r => {\n                                    return (\n                                        <li>{r}</li>\n                                    )\n                                })\n                            }\n                        </ul>}\n\n                </div>\n            </div>\n        )\n    }\n};\n\n\nexport default connect(\n    mapStateToProps,\n    null\n)(SearchBarDropdown);","/Users/jae/Documents/Pillar/frontend/src/components/giphy/giphy.jsx",[],"/Users/jae/Documents/Pillar/frontend/src/components/message/message.jsx",["220","221","222"],"import React, { Component } from 'react';\nimport { debug } from 'request';\nimport EditMessageForm from './edit_message_form_container.js';\nimport Replies from './replies.jsx';\nimport RepliesForm from './replies_container.js'\nexport default class Message extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      repliesOpen: false\n    }\n    this.editMessage = this.editMessage.bind(this);\n    this.deleteMessage = this.deleteMessage.bind(this);\n    this.deleteGif = this.deleteGif.bind(this);\n    this.toggleReplies = this.toggleReplies.bind(this)\n  };\n\n  componentDidMount(){\n    this.props.socket.on(\"Message Edited\", this.editMessage);\n    this.props.socket.on(\"Message Deleted\", this.deleteMessage);\n  };\n\n  editMessage(msg){\n     \n    if (msg._id === this.props.msg.id){\n      this.props.editMessage(msg);\n    }\n  };\n\n  deleteMessage(msg){\n    if (msg._id === this.props.msg.id) {\n      this.props.deleteMessage(msg);\n    }\n  };\n\n  deleteGif(){\n    let response = window.confirm(`Are you sure you want to delete your Gif?`);\n    if (response) {\n      this.props.socket.emit(\"Delete Message\", this.props.msg);\n    }\n  };\n\n  toggleReplies(){\n    this.state.repliesOpen === true ? \n    this.setState({repliesOpen: false}) : this.setState({repliesOpen: true})\n  };\n  \n  render() {\n    //show edit button only if current user was the author of this message\n    //open edit message textfield form if button is clicked\n    //use socket to edit database and all connected users' message\n    //update redux state (room and messages)\n    let msg = this.props.msg;\n    let author = false;\n  \n    if (msg.sender === this.props.user.id){\n       author = true;\n     }\n    \n    let message;\n    if (msg.message.includes('giphy')){\n      message = <li key={msg.id}>{msg.username} says: <img className=\"chat-img\" src={msg.message} alt=\"image\" />\n        {author && \n          <button onClick={this.deleteGif}>Delete Gif</button>\n        }\n      </li>\n    } else {\n      message = <li key={msg.id} id={this.props.id}>{msg.username} says: {msg.message}\n        {author &&\n          <EditMessageForm socket={this.props.socket} msg={msg}/> \n        }\n       \n      </li>\n    }\n\n   \n    return (\n      <div>\n      {message}\n\n        <RepliesForm socket={this.props.socket} msg={msg} message={msg.message}/>\n      </div>\n   \n    )\n  }\n}\n","/Users/jae/Documents/Pillar/frontend/src/components/message/replies_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/message/replies.jsx",["223"],"import React from \"react\"\nimport moment from \"moment\";\nimport Picker from 'emoji-picker-react';\nimport Giphy from \"../giphy/giphy\";\nimport EditReplyForm from './edit_reply_form';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport {switcheThread} from './../../components/chat/data_share';\n\n\nclass Replies extends React.Component {\n   constructor(props){\n      super(props)\n\n      this.state ={\n         replyBox: false,\n         replyText: \"\",\n         repliesOpen: false,\n         emojiPicker: false,\n      }\n      this.handleReply = this.handleReply.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.submitReply = this.submitReply.bind(this);\n      this.toggleReplies = this.toggleReplies.bind(this)\n      this.openEmoji = this.openEmoji.bind(this);\n      this.selectEmoji = this.selectEmoji.bind(this);\n      this.useGiphy = this.useGiphy.bind(this);\n      this.deleteGifReply = this.deleteGifReply.bind(this);\n\n   };\n\n   componentDidMount(){\n      this.subscription = switcheThread.receiveOpenThread().subscribe(message=>{\n      if(message === this.props.message.message){\n        this.setState({repliesOpen: true});\n      }; \n    })\n   };\n\n   handleReply(e) {\n      this.state.replyBox === false ? \n         (this.props.replies  ?\n           this.setState({ replyBox: true, repliesOpen: true })\n           : \n           this.setState({replyBox: true, repliesOpen: false})\n         ) \n        :\n        this.setState({ replyBox: false, repliesOpen: false })\n\n   }\n   handleChange(e){\n      this.setState({\n         replyText: e.currentTarget.value\n      })\n   };\n\n   submitReply(e){\n      e.preventDefault();\n      let username = this.props.user.username;\n      let userId = this.props.user.id;\n       \n      let room = this.props.room;\n\n      let timestamp = moment().format('LT');\n      let reply = this.state.replyText;\n      let message = this.props.msg.message\n      let id =  this.props.message.id;\n      this.props.socket.emit(\"Edit Message\", {\n         reply,\n         timestamp,\n         username,\n         userId,\n         room,\n         message,\n         id\n      })\n      this.setState({\n         replyText: \"\",\n         repliesOpen: true,\n      })\n   };\n\n   toggleReplies() {\n      this.state.repliesOpen === true ?\n         this.setState({ repliesOpen: false, replyBox: false })\n          : \n         this.setState({ repliesOpen: true, replyBox: true })\n   };\n\n   selectEmoji(e, emojiObject) {\n      let newMessage = this.state.replyText + emojiObject.emoji;\n      this.setState({\n         replyText: newMessage\n      })\n   };\n\n   openEmoji() {\n      this.state.emojiPicker === true ?\n         this.setState({ emojiPicker: false }) :\n         this.setState({ emojiPicker: true })\n   };\n\n   useGiphy(e) {\n      e.preventDefault();\n      let username = this.props.user.username;\n      let userId = this.props.user.id;\n      let room = this.props.room;\n\n      let timestamp = moment().format('LT');\n      let reply = `${e.target.src}`;\n      let message = this.props.msg.message;\n      let id = this.props.message.id;\n      this.props.socket.emit(\"Edit Message\", {\n         reply,\n         timestamp,\n         username,\n         userId,\n         room,\n         message,\n         id\n      })\n      this.setState({\n         replyText: \"\",\n         repliesOpen: true,\n      })\n   };\n\n   deleteGifReply(e){\n      let response = window.confirm(`Are you sure you want to delete your Gif?`);\n      if (response) {\n         let replies = cloneDeep(this.props.msg.replies);\n         let replyId = e.currentTarget.id;\n          \n         let replyIndex = replies.findIndex(reply => replyId === reply._id);\n         replies.splice(replyIndex, 1);\n\n         this.props.socket.emit(\"Edit Message Reply\", {\n            message: this.props.msg,\n            replies: replies,\n         });\n      }\n   }\n\n\n   render(){\n      let msg = this.props.msg;\n\n      return(\n         <div>\n            {msg.replies && this.state.repliesOpen === true ?\n               (\n\n                  [msg.replies.map(reply => {\n                     // return (\n                     if (reply.reply.includes(\"giphy\")){\n                        return (\n                           <li key={reply._id} className=\"reply\" >\n                              {reply.username} says: <img className=\"chat-img\" src={reply.reply} alt=\"image\" />\n                              {reply.userId === this.props.user.id && \n                                 <button onClick={this.deleteGifReply} id={reply._id}>Delete Gif</button>\n                              }\n                           </li>\n                        )\n                     }\n                     else{\n                        return (\n                           <li key={reply._id} className=\"reply\" id={`msg-reply-${reply.reply}`}>\n                              {reply.username} says: {reply.reply}\n                              {reply.userId === this.props.user.id &&\n                                 <EditReplyForm socket={this.props.socket} msg={msg} replyId={reply._id}/>\n                              }\n                           </li>\n                        )\n                     }\n                  }),\n\n                     <button key=\"button\" className=\"replies-div\" onClick={this.toggleReplies}> Close Thread</button> \n                  ])\n               : (msg.replies.length > 0 ? \n                  (msg.replies.length > 1 ?\n                      <button className=\"replies-div\" onClick={this.toggleReplies}> View {msg.replies.length} replies</button>\n                      :\n                     <button className=\"replies-div\" onClick={this.toggleReplies}> View {msg.replies.length} reply</button>\n                  )\n                  : <button className=\"replies-div\" onClick={this.toggleReplies}> Start Thread</button>)\n            }\n            {this.state.replyBox === false ?\n            // (<button onClick={this.handleReply}> Add Reply</button>)\n            \"\"\n            :\n            (\n               <div>\n                  <form onSubmit={this.submitReply}>\n                    \n                     <input type=\"text\" onChange={this.handleChange} value={this.state.replyText}/>\n                        \n                  </form>\n                     {this.state.emojiPicker === false ?\n                        <button onClick={this.openEmoji} > ☺ </button> :\n                        <div onMouseLeave={this.openEmoji}> <Picker className=\"emoji-picker\" onEmojiClick={this.selectEmoji} /> </div>}\n                     <Giphy useGiphy={this.useGiphy} roomTitle={this.props.room.title} />\n                     {/* <button onClick={this.handleReply}> Cancel</button> */}\n               </div>\n            )}\n            \n         </div>\n      )\n   }\n}\n\nexport default Replies;","/Users/jae/Documents/Pillar/frontend/src/components/message/edit_message_form_container.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/message/edit_reply_form.jsx",[],"/Users/jae/Documents/Pillar/frontend/src/components/message/edit_message_form.jsx",[],"/Users/jae/Documents/Pillar/frontend/src/reducers/modal_reducer.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/splash/splash_page_container.js",["224"],"import { connect } from 'react-redux';\nimport { openModal, closeModal} from '../../actions/modal_actions';\nimport SplashPage from './splash_page';\n\nconst mapStateToProps = (state) => ({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  openModal: modal => dispatch(openModal(modal))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SplashPage);","/Users/jae/Documents/Pillar/frontend/src/components/modal/modal.jsx",[],"/Users/jae/Documents/Pillar/frontend/src/actions/modal_actions.js",[],"/Users/jae/Documents/Pillar/frontend/src/components/splash/splash_page.jsx",[],"/Users/jae/Documents/Pillar/frontend/src/components/session/session_form.js",[],{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":3,"column":18,"nodeType":"231","messageId":"232","endLine":3,"endColumn":23},{"ruleId":"229","severity":1,"message":"233","line":5,"column":8,"nodeType":"231","messageId":"232","endLine":5,"endColumn":16},{"ruleId":"229","severity":1,"message":"234","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":15},{"ruleId":"235","severity":1,"message":"236","line":10,"column":1,"nodeType":"237","endLine":35,"endColumn":2},{"ruleId":"229","severity":1,"message":"238","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":15},{"ruleId":"229","severity":1,"message":"239","line":1,"column":29,"nodeType":"231","messageId":"232","endLine":1,"endColumn":43},{"ruleId":"229","severity":1,"message":"240","line":1,"column":61,"nodeType":"231","messageId":"232","endLine":1,"endColumn":75},{"ruleId":"229","severity":1,"message":"241","line":1,"column":77,"nodeType":"231","messageId":"232","endLine":1,"endColumn":89},{"ruleId":"229","severity":1,"message":"242","line":1,"column":91,"nodeType":"231","messageId":"232","endLine":1,"endColumn":104},{"ruleId":"243","severity":1,"message":"244","line":74,"column":37,"nodeType":"245","messageId":"246","endLine":74,"endColumn":39},{"ruleId":"247","severity":1,"message":"248","line":289,"column":33,"nodeType":"249","messageId":"250","endLine":289,"endColumn":35},{"ruleId":"229","severity":1,"message":"251","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":19},{"ruleId":"229","severity":1,"message":"252","line":4,"column":21,"nodeType":"231","messageId":"232","endLine":4,"endColumn":31},{"ruleId":"229","severity":1,"message":"253","line":4,"column":33,"nodeType":"231","messageId":"232","endLine":4,"endColumn":43},{"ruleId":"229","severity":1,"message":"254","line":4,"column":45,"nodeType":"231","messageId":"232","endLine":4,"endColumn":55},{"ruleId":"229","severity":1,"message":"255","line":4,"column":57,"nodeType":"231","messageId":"232","endLine":4,"endColumn":65},{"ruleId":"229","severity":1,"message":"256","line":4,"column":67,"nodeType":"231","messageId":"232","endLine":4,"endColumn":76},{"ruleId":"229","severity":1,"message":"257","line":4,"column":78,"nodeType":"231","messageId":"232","endLine":4,"endColumn":92},{"ruleId":"229","severity":1,"message":"258","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":10},{"ruleId":"229","severity":1,"message":"241","line":2,"column":9,"nodeType":"231","messageId":"232","endLine":2,"endColumn":21},{"ruleId":"229","severity":1,"message":"259","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":27},{"ruleId":"229","severity":1,"message":"260","line":4,"column":29,"nodeType":"231","messageId":"232","endLine":4,"endColumn":37},{"ruleId":"229","severity":1,"message":"261","line":5,"column":9,"nodeType":"231","messageId":"232","endLine":5,"endColumn":16},{"ruleId":"229","severity":1,"message":"262","line":6,"column":10,"nodeType":"231","messageId":"232","endLine":6,"endColumn":20},{"ruleId":"229","severity":1,"message":"263","line":54,"column":13,"nodeType":"231","messageId":"232","endLine":54,"endColumn":17},{"ruleId":"243","severity":1,"message":"244","line":72,"column":30,"nodeType":"245","messageId":"246","endLine":72,"endColumn":32},{"ruleId":"247","severity":1,"message":"248","line":171,"column":44,"nodeType":"249","messageId":"250","endLine":171,"endColumn":46},{"ruleId":"243","severity":1,"message":"244","line":116,"column":46,"nodeType":"245","messageId":"246","endLine":116,"endColumn":48},{"ruleId":"243","severity":1,"message":"244","line":150,"column":54,"nodeType":"245","messageId":"246","endLine":150,"endColumn":56},{"ruleId":"229","severity":1,"message":"238","line":2,"column":10,"nodeType":"231","messageId":"232","endLine":2,"endColumn":15},{"ruleId":"229","severity":1,"message":"264","line":4,"column":8,"nodeType":"231","messageId":"232","endLine":4,"endColumn":15},{"ruleId":"265","severity":1,"message":"266","line":63,"column":55,"nodeType":"267","endLine":63,"endColumn":113},{"ruleId":"265","severity":1,"message":"266","line":157,"column":54,"nodeType":"267","endLine":157,"endColumn":112},{"ruleId":"229","severity":1,"message":"268","line":2,"column":21,"nodeType":"231","messageId":"232","endLine":2,"endColumn":31},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'MainPage' is defined but never used.","'ChatBox' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'debug' is defined but never used.","'deleteRoomUtil' is defined but never used.","'createRoomUtil' is defined but never used.","'getRoomUsers' is defined but never used.","'leaveRoomUtil' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'fetchRoom' is defined but never used.","'fetchRooms' is defined but never used.","'createRoom' is defined but never used.","'removeRoom' is defined but never used.","'editRoom' is defined but never used.","'leaveRoom' is defined but never used.","'updateUserList' is defined but never used.","'io' is defined but never used.","'getAvailableRooms' is defined but never used.","'getRooms' is defined but never used.","'getUser' is defined but never used.","'updateRoom' is defined but never used.","'user' is assigned a value but never used.","'Replies' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'closeModal' is defined but never used.","no-global-assign","no-unsafe-negation"]